"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stats = void 0;
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
var createState = function createState() {
  return {
    unused: new Map(),
    used: new Set(),
    provided: new Set()
  };
};
var stats = exports.stats = {
  state: createState(),
  set: function set(inj) {
    var _inj$value;
    // allow injectable override without flagging as unused
    var _iterator = _createForOfIteratorHelper(this.state.unused.keys()),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var unusedInj = _step.value;
        if (unusedInj.from === inj.from) this.state.unused["delete"](unusedInj);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this.state.unused.set(inj, new Error("Unused \"di\" injectable: ".concat(((_inj$value = inj.value) === null || _inj$value === void 0 ? void 0 : _inj$value.displayName) || inj.value, "."), {
      cause: inj.cause
    }));
  },
  track: function track(inj) {
    if (!inj) return;
    this.state.unused["delete"](inj);
    this.state.used.add(inj);
    this.state.provided.add(inj.from);
    // reset to avoid potential memory leaks via stack traces
    inj.cause = null;
  },
  reset: function reset() {
    this.state = createState();
  },
  unused: function unused() {
    return Array.from(this.state.unused.entries()).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        inj = _ref2[0],
        _error = _ref2[1];
      return {
        get: function get() {
          return inj.value;
        },
        error: function error() {
          return _error;
        }
      };
    });
  }
};