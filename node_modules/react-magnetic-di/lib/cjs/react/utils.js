"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addInjectableToMap = addInjectableToMap;
exports.debug = debug;
exports.findInjectable = findInjectable;
exports.getDisplayName = getDisplayName;
exports.removeInjectableFromMap = removeInjectableFromMap;
exports.warnOnce = warnOnce;
var _constants = require("./constants");
var _stats = require("./stats");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
var hasWarned = false;
function warnOnce(message) {
  if (!hasWarned) {
    // eslint-disable-next-line no-console
    console.warn('Warning:', message);
    hasWarned = true;
  }
}
function addInjectableToMap(replacementMap, inj) {
  var injObj = _constants.diRegistry.get(inj);
  if (!injObj) {
    throw new Error("Seems like you are trying to use \"".concat(inj, "\" as injectable, but magnetic-di needs the return value of \"injectable()\""));
  }
  if (injObj.track) _stats.stats.set(injObj);
  if (replacementMap.has(injObj.from)) {
    replacementMap.get(injObj.from).add(injObj);
  } else {
    replacementMap.set(injObj.from, new Set([injObj]));
  }
  return replacementMap;
}
function removeInjectableFromMap(replacementMap, inj) {
  var injObj = _constants.diRegistry.get(inj);
  var injectables = replacementMap.get(injObj.from) || new Set();
  if (injectables.size === 1) {
    replacementMap["delete"](injObj.from);
  } else {
    injectables["delete"](injObj);
  }
}
function getDisplayName(Comp) {
  var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var name = Comp.displayName || Comp.name;
  return !name || !wrapper ? name : "".concat(wrapper, "(").concat(name, ")");
}
function debug(fn) {
  var source = fn.toString();
  var _ref = source.match(/const \[[^\]]+\] = .*di.*\(\w+[,\s]+([^)]+)/) || [],
    _ref2 = _slicedToArray(_ref, 2),
    args = _ref2[1];
  return args;
}
function findInjectable(replacementMap, dep, targetChild) {
  var injectables = replacementMap.get(dep);
  if (!injectables) return null;

  // loop all injectables for the dep, with targeted ones preferred
  var anyCandidate = null;
  var targetCandidate = null;
  var _iterator = _createForOfIteratorHelper(injectables),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _inj$targets;
      var inj = _step.value;
      if (!inj.targets) anyCandidate = inj;
      if ((_inj$targets = inj.targets) !== null && _inj$targets !== void 0 && _inj$targets.has(targetChild)) targetCandidate = inj;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var candidate = targetCandidate || anyCandidate;
  _stats.stats.track(candidate);
  return candidate;
}