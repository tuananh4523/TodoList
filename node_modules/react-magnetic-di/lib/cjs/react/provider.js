"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiProvider = void 0;
exports.withDi = withDi;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _constants = require("./constants");
var _context = require("./context");
var _utils = require("./utils");
var _global = require("./global");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, "default": e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(t, e) { if (e && ("object" == _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t); }
function _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }
function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e); }
function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
var DiProvider = exports.DiProvider = /*#__PURE__*/function (_Component) {
  function DiProvider() {
    var _this;
    _classCallCheck(this, DiProvider);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, DiProvider, [].concat(args));
    _this.value = undefined;
    return _this;
  }
  _inherits(DiProvider, _Component);
  return _createClass(DiProvider, [{
    key: "componentDidCatch",
    value: function componentDidCatch(err) {
      _global.globalDi._remove(this.props.use);
      throw err;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _global.globalDi._remove(this.props.use);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (this.value) return this.value;
      var _this$props = this.props,
        use = _this$props.use,
        target = _this$props.target,
        global = _this$props.global;
      var _getDependencies = this.context.getDependencies;

      // create a map of dependency real -> replacements for fast lookup
      var replacementMap = use.reduce(function (acc, inj) {
        (0, _utils.addInjectableToMap)(acc, inj);
        return acc;
      }, new Map());
      // supports global di if needed
      _global.globalDi._fromProvider(use, {
        global: global
      });
      // support single or multiple targets
      var targets = target && new WeakSet(Array.isArray(target) ? target : [target]);
      this.value = {
        getDependencies: function getDependencies(realDeps, targetChild) {
          // First we collect dependencies from parent provider(s) (if any)
          var dependencies = _getDependencies(realDeps, targetChild);
          // If no target or target is in the array of targets, map use
          if (!targets || targets.has(targetChild)) {
            for (var i = 0; i < dependencies.length; i++) {
              // dep can be either the original or a replacement
              // if another provider at the top has already swapped it
              // so we check if here we need to inject a different one
              // or return the original / parent replacement
              var dep = dependencies[i];
              var real = _constants.diRegistry.has(dep) ? _constants.diRegistry.get(dep).from : dep;
              var replacedInj = (0, _utils.findInjectable)(replacementMap, real, targetChild);
              if (replacedInj) dependencies[i] = replacedInj.value;
            }
          }
          return dependencies;
        }
      };
      return this.value;
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/_react["default"].createElement(_context.Context.Provider, {
        value: this.getValue()
      }, this.props.children);
    }
  }]);
}(_react.Component);
DiProvider.contextType = _context.Context;
DiProvider.propTypes = {
  children: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].node]),
  global: _propTypes["default"].bool,
  target: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].arrayOf(_propTypes["default"].func)]),
  use: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].object])).isRequired
};
function withDi(Comp, deps) {
  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var WrappedComponent = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    return /*#__PURE__*/_react["default"].createElement(DiProvider, {
      use: deps,
      target: target
    }, /*#__PURE__*/_react["default"].createElement(Comp, _extends({
      ref: ref
    }, props)));
  });
  WrappedComponent.displayName = (0, _utils.getDisplayName)(Comp, 'withDi');
  return WrappedComponent;
}