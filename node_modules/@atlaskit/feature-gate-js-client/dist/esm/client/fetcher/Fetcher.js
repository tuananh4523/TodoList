import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import _regeneratorRuntime from "@babel/runtime/regenerator";
import { FeatureGateEnvironment, PerimeterType } from '../types';
import { CLIENT_VERSION } from '../version';
import { ResponseError } from './errors';
var DEFAULT_REQUEST_TIMEOUT_MS = 5000;
export var PROD_BASE_URL = 'https://api.atlassian.com/flags';
export var STAGING_BASE_URL = 'https://api.stg.atlassian.com/flags';
export var DEV_BASE_URL = 'https://api.dev.atlassian.com/flags';
export var FEDM_STAGING_BASE_URL = 'https://api.stg.atlassian-us-gov-mod.com/flags';
export var FEDM_PROD_BASE_URL = 'https://api.atlassian-us-gov-mod.com/flags';
export var IC_FFS_BASE_URL = 'https://atlassian-statsig-proxy-archetype.atl-paas.%s.atl-ic.net';
export var IC_STAGING_BASE_DOMAIN_URL = 'oasis-stg.com/flags';
export var IC_PROD_BASE_DOMAIN_URL = 'atlassian-isolated.net/flags';
export var GATEWAY_BASE_URL = '/gateway/api/flags';
var Fetcher = /*#__PURE__*/function () {
  function Fetcher() {
    _classCallCheck(this, Fetcher);
  }
  return _createClass(Fetcher, null, [{
    key: "fetchClientSdk",
    value: function () {
      var _fetchClientSdk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fetcherOptions) {
        var targetApp, url;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              targetApp = fetcherOptions.targetApp;
              url = "/api/v2/frontend/clientSdkKey/".concat(targetApp);
              _context.prev = 2;
              _context.next = 5;
              return this.fetchRequest(url, 'GET', fetcherOptions);
            case 5:
              return _context.abrupt("return", _context.sent);
            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](2);
              if (!(_context.t0 instanceof Error)) {
                _context.next = 12;
                break;
              }
              throw _context.t0;
            case 12:
              throw Error('Failed to retrieve client sdk key');
            case 13:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[2, 8]]);
      }));
      function fetchClientSdk(_x) {
        return _fetchClientSdk.apply(this, arguments);
      }
      return fetchClientSdk;
    }()
  }, {
    key: "fetchExperimentValues",
    value: function () {
      var _fetchExperimentValues = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fetcherOptions, identifiers, customAttributes) {
        var requestBody;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              requestBody = {
                identifiers: identifiers,
                customAttributes: customAttributes,
                targetApp: fetcherOptions.targetApp
              };
              _context2.prev = 1;
              _context2.next = 4;
              return this.fetchRequest('/api/v2/frontend/experimentValues', 'POST', fetcherOptions, requestBody);
            case 4:
              return _context2.abrupt("return", _context2.sent);
            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](1);
              if (!(_context2.t0 instanceof Error)) {
                _context2.next = 11;
                break;
              }
              throw _context2.t0;
            case 11:
              throw Error('Failed to retrieve experiment values');
            case 12:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[1, 7]]);
      }));
      function fetchExperimentValues(_x2, _x3, _x4) {
        return _fetchExperimentValues.apply(this, arguments);
      }
      return fetchExperimentValues;
    }()
  }, {
    key: "handleResponseError",
    value: function () {
      var _handleResponseError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(response) {
        var body;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (response.ok) {
                _context3.next = 5;
                break;
              }
              _context3.next = 3;
              return response.text();
            case 3:
              body = _context3.sent;
              throw new ResponseError("Non 2xx response status received, status: ".concat(response.status, ", body: ").concat(JSON.stringify(body)));
            case 5:
              if (!(response.status === 204)) {
                _context3.next = 7;
                break;
              }
              throw new ResponseError('Unexpected 204 response');
            case 7:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      }));
      function handleResponseError(_x5) {
        return _handleResponseError.apply(this, arguments);
      }
      return handleResponseError;
    }()
  }, {
    key: "extractResponseBody",
    value: function () {
      var _extractResponseBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(response) {
        var value;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return response.text();
            case 2:
              value = _context4.sent;
              return _context4.abrupt("return", JSON.parse(value));
            case 4:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function extractResponseBody(_x6) {
        return _extractResponseBody.apply(this, arguments);
      }
      return extractResponseBody;
    }()
  }, {
    key: "getBaseUrl",
    value: function getBaseUrl(serviceEnv) {
      var useGatewayUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var perimeter = arguments.length > 2 ? arguments[2] : undefined;
      var isolationContextId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      if (useGatewayUrl) {
        return GATEWAY_BASE_URL;
      }
      if (perimeter === PerimeterType.FEDRAMP_MODERATE) {
        switch (serviceEnv) {
          case FeatureGateEnvironment.Production:
            return FEDM_PROD_BASE_URL;
          case FeatureGateEnvironment.Staging:
            return FEDM_STAGING_BASE_URL;
          default:
            throw new Error("Invalid environment \"".concat(serviceEnv, "\" for \"").concat(perimeter, "\" perimeter"));
        }
      } else if (perimeter === PerimeterType.COMMERCIAL) {
        switch (serviceEnv) {
          case FeatureGateEnvironment.Development:
            return DEV_BASE_URL;
          case FeatureGateEnvironment.Staging:
            var apiUrl = this.getApiUrl(isolationContextId);
            if (apiUrl !== null) {
              return apiUrl;
            }
            return STAGING_BASE_URL;
          default:
            var prodApiUrl = this.getApiUrl(isolationContextId);
            if (prodApiUrl !== null) {
              return prodApiUrl;
            }
            return PROD_BASE_URL;
        }
      } else {
        throw new Error("Invalid perimeter \"".concat(perimeter, "\""));
      }
    }
  }, {
    key: "fetchRequest",
    value: function () {
      var _fetchRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(path, method, fetcherOptions, body) {
        var baseUrl, fetchTimeout, abortSignal, abortController, response;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              baseUrl = Fetcher.getBaseUrl(fetcherOptions.environment, fetcherOptions.useGatewayURL, fetcherOptions.perimeter, fetcherOptions.isolationContextId);
              fetchTimeout = fetcherOptions.fetchTimeoutMs || DEFAULT_REQUEST_TIMEOUT_MS;
              if (AbortSignal.timeout) {
                abortSignal = AbortSignal.timeout(fetchTimeout);
              } else if (AbortController) {
                abortController = new AbortController();
                abortSignal = abortController.signal;
                setTimeout(function () {
                  return abortController.abort();
                }, fetchTimeout);
              }
              _context5.next = 5;
              return fetch("".concat(baseUrl).concat(path), _objectSpread({
                method: method,
                headers: {
                  'Content-Type': 'application/json',
                  'X-Client-Name': 'feature-gate-js-client',
                  'X-Client-Version': CLIENT_VERSION,
                  'X-API-KEY': fetcherOptions.apiKey
                },
                signal: abortSignal
              }, body && {
                body: JSON.stringify(body)
              }));
            case 5:
              response = _context5.sent;
              _context5.next = 8;
              return this.handleResponseError(response);
            case 8:
              _context5.next = 10;
              return this.extractResponseBody(response);
            case 10:
              return _context5.abrupt("return", _context5.sent);
            case 11:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function fetchRequest(_x7, _x8, _x9, _x0) {
        return _fetchRequest.apply(this, arguments);
      }
      return fetchRequest;
    }()
  }, {
    key: "getApiUrl",
    value: function getApiUrl(isolationContextId) {
      var window = this.getWindowLocation();
      if (window === undefined) {
        //this is needed when this SDK is used for SSR or plugin use cases where secret keys not available to use backend SDKs
        if (!isolationContextId) {
          return null;
        }
        return IC_FFS_BASE_URL.replace('%s', isolationContextId);
      }
      var protocol = window.protocol,
        hostname = window.hostname;

      // Match last subdomain fragment before oasis-stg.com
      var oasisMatch = hostname.match(/([^.]+)\.oasis-stg\.com$/);
      if (oasisMatch) {
        return "".concat(protocol, "//api.").concat(oasisMatch[1], ".").concat(IC_STAGING_BASE_DOMAIN_URL);
      }

      // Match last subdomain fragment before atlassian-isolated.net
      var isolatedMatch = hostname.match(/([^.]+)\.atlassian-isolated\.net$/);
      if (isolatedMatch) {
        return "".concat(protocol, "//api.").concat(isolatedMatch[1], ".").concat(IC_PROD_BASE_DOMAIN_URL);
      }
      return null;
    }
  }, {
    key: "getWindowLocation",
    value: function getWindowLocation() {
      if (typeof window !== 'undefined' && window.location) {
        return window.location;
      }
      return undefined;
    }
  }]);
}();
export { Fetcher as default };