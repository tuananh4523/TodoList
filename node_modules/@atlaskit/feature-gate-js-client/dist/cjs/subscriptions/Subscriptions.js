"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ALL_FEATURE_VALUES = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _eventemitter = _interopRequireDefault(require("eventemitter3"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var ALL_FEATURE_VALUES = exports.ALL_FEATURE_VALUES = '@all-features';
var Subscriptions = exports.default = /*#__PURE__*/function () {
  function Subscriptions() {
    (0, _classCallCheck2.default)(this, Subscriptions);
    (0, _defineProperty2.default)(this, "eventToValue", new Map());
    this.emitter = new _eventemitter.default();
  }
  return (0, _createClass2.default)(Subscriptions, [{
    key: "onGateUpdated",
    value: function onGateUpdated(gateName, callback, checkGate, options) {
      var _this = this;
      var value = checkGate(gateName, _objectSpread(_objectSpread({}, options), {}, {
        fireGateExposure: false
      }));
      if (this.eventToValue.get(callback) === undefined) {
        this.eventToValue.set(callback, value);
      }
      var wrapCallback = function wrapCallback() {
        var value = checkGate(gateName, _objectSpread(_objectSpread({}, options), {}, {
          fireGateExposure: false
        }));
        var existingValue = _this.eventToValue.get(callback);
        if (existingValue !== value) {
          _this.eventToValue.set(callback, value);
          callback(value);
        }
      };
      this.emitter.on(gateName, wrapCallback);
      return function () {
        _this.emitter.off(gateName, wrapCallback);
      };
    }
  }, {
    key: "onExperimentValueUpdated",
    value: function onExperimentValueUpdated(experimentName, parameterName, defaultValue, callback, getExperimentValue, options) {
      var _this2 = this;
      var experimentEventName = "".concat(experimentName, ".").concat(parameterName);
      var value = getExperimentValue(experimentName, parameterName, defaultValue, _objectSpread(_objectSpread({}, options), {}, {
        fireExperimentExposure: false
      }));
      if (this.eventToValue.get(callback) === undefined) {
        this.eventToValue.set(callback, value);
      }
      var wrapCallback = function wrapCallback() {
        var value = getExperimentValue(experimentName, parameterName, defaultValue, _objectSpread(_objectSpread({}, options), {}, {
          fireExperimentExposure: false
        }));
        var existingValue = _this2.eventToValue.get(callback);
        if (existingValue !== value) {
          _this2.eventToValue.set(callback, value);
          callback(value);
        }
      };
      this.emitter.on(experimentEventName, wrapCallback);
      return function () {
        _this2.emitter.off(experimentEventName, wrapCallback);
      };
    }
  }, {
    key: "onAnyUpdated",
    value: function onAnyUpdated(callback) {
      var _this3 = this;
      this.emitter.on(ALL_FEATURE_VALUES, callback);
      return function () {
        _this3.emitter.off(ALL_FEATURE_VALUES, callback);
      };
    }
  }, {
    key: "anyUpdated",
    value: function anyUpdated() {
      var _this4 = this;
      this.emitter.emit(ALL_FEATURE_VALUES);
      this.emitter.eventNames().filter(function (name) {
        return name !== ALL_FEATURE_VALUES;
      }).forEach(function (event) {
        _this4.emitter.emit(event);
      });
    }
  }]);
}();