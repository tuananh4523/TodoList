"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DynamicConfig = void 0;
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _utils = require("../utils");
// Reference: https://github.com/statsig-io/js-lite/blob/main/src/DynamicConfig.ts
var DynamicConfig = exports.DynamicConfig = /*#__PURE__*/function () {
  function DynamicConfig(configName, configValue, ruleID, evaluationDetails) {
    var secondaryExposures = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
    var allocatedExperimentName = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
    var onDefaultValueFallback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    (0, _classCallCheck2.default)(this, DynamicConfig);
    this.value = configValue;
    this._name = configName;
    this._ruleID = ruleID;
    this._secondaryExposures = secondaryExposures;
    this._allocatedExperimentName = allocatedExperimentName;
    this._evaluationDetails = evaluationDetails;
    this._onDefaultValueFallback = onDefaultValueFallback;
  }
  return (0, _createClass2.default)(DynamicConfig, [{
    key: "get",
    value: function get(key, defaultValue, typeGuard) {
      var _this$_onDefaultValue2;
      var val = this.getValue(key, defaultValue);
      if (val == null) {
        return defaultValue;
      }
      var expectedType = Array.isArray(defaultValue) ? 'array' : (0, _typeof2.default)(defaultValue);
      var actualType = Array.isArray(val) ? 'array' : (0, _typeof2.default)(val);
      if (typeGuard) {
        var _this$_onDefaultValue;
        if (typeGuard(val)) {
          this.fireExposure(key);
          return val;
        }
        (_this$_onDefaultValue = this._onDefaultValueFallback) === null || _this$_onDefaultValue === void 0 || _this$_onDefaultValue.call(this, this, key, expectedType, actualType);
        return defaultValue;
      }
      if (defaultValue == null || expectedType === actualType) {
        this.fireExposure(key);
        return val;
      }
      (_this$_onDefaultValue2 = this._onDefaultValueFallback) === null || _this$_onDefaultValue2 === void 0 || _this$_onDefaultValue2.call(this, this, key, expectedType, actualType);
      return defaultValue;
    }
  }, {
    key: "getValue",
    value: function getValue(key, defaultValue) {
      if (key == null) {
        return this.value;
      }
      if (defaultValue == null) {
        defaultValue = null;
      }
      if (this.value[key] == null) {
        return defaultValue;
      }
      this.fireExposure(key);
      return this.value[key];
    }
  }, {
    key: "fireExposure",
    value: function fireExposure(key) {
      // Call the wrapped experiment's get method to fire exposure
      if (this.experiment) {
        this.experiment.get(key);
      }
    }
  }], [{
    key: "fromExperiment",
    value: function fromExperiment(experiment) {
      var _experiment$__evaluat, _experiment$__evaluat2, _experiment$groupName;
      var config = new DynamicConfig(experiment.name, experiment.value, experiment.ruleID, (0, _utils.migrateEvaluationDetails)(experiment.details), (0, _utils.migrateSecondaryExposures)((_experiment$__evaluat = (_experiment$__evaluat2 = experiment.__evaluation) === null || _experiment$__evaluat2 === void 0 ? void 0 : _experiment$__evaluat2.secondary_exposures) !== null && _experiment$__evaluat !== void 0 ? _experiment$__evaluat : []), (_experiment$groupName = experiment.groupName) !== null && _experiment$groupName !== void 0 ? _experiment$groupName : undefined);
      config.experiment = experiment;
      return config;
    }

    /** @deprecated - do not use, this is still exported for backwards compatibility but will be removed in the next major version  */
  }]);
}();