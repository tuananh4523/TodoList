"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _routerLinkProvider = _interopRequireDefault(require("./router-link-provider"));
var _themeProvider = _interopRequireDefault(require("./theme-provider"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var InsideAppProviderContext = /*#__PURE__*/(0, _react.createContext)(false);
/**
 * __App provider__
 *
 * An app provider provides app level configuration such as global theming.
 *
 * Place it at the root of your application.
 */
function AppProvider(_ref) {
  var children = _ref.children,
    _ref$defaultColorMode = _ref.defaultColorMode,
    defaultColorMode = _ref$defaultColorMode === void 0 ? 'light' : _ref$defaultColorMode,
    defaultTheme = _ref.defaultTheme,
    routerLinkComponent = _ref.routerLinkComponent,
    UNSAFE_isThemingDisabled = _ref.UNSAFE_isThemingDisabled;
  var isInsideAppProvider = (0, _react.useContext)(InsideAppProviderContext);
  if (isInsideAppProvider) {
    throw new Error('App provider should not be nested within another app provider.');
  }
  var routerLinkProvider = /*#__PURE__*/_react.default.createElement(_routerLinkProvider.default, {
    routerLinkComponent: routerLinkComponent
  }, children);
  return /*#__PURE__*/_react.default.createElement(InsideAppProviderContext.Provider, {
    value: true
  }, UNSAFE_isThemingDisabled ? routerLinkProvider : /*#__PURE__*/_react.default.createElement(_themeProvider.default, {
    defaultColorMode: defaultColorMode,
    defaultTheme: defaultTheme
  }, routerLinkProvider));
}
var _default = exports.default = AppProvider;