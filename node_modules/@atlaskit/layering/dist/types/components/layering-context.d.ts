import React, { type MutableRefObject, type ReactNode } from 'react';
import { LayerNode } from '../classes/layer-node';
/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export declare const LevelContext: React.Context<number>;
/**
 *
 *  @internal
 * LevelNodeContext maintains the current layer node of nested layers.
 * Default ref value is null
 */
export declare const LevelNodeContext: React.Context<React.MutableRefObject<LayerNode | null>>;
/**
 *
 *  @internal
 * RootNodeContext maintains the root node of the layer tree.
 * Default ref value is null
 */
export declare const RootNodeContext: React.Context<React.MutableRefObject<LayerNode | null>>;
/**
 *
 *  @internal @deprecated
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export declare const TopLevelContext: React.Context<{
    topLevelRef: MutableRefObject<number | null>;
    layerList: MutableRefObject<string[] | null>;
    setTopLevel: (level: number) => void;
}>;
/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 * For more information on the implementation: https://hello.atlassian.net/wiki/x/FQCDQwE
 *
 */
export declare const Layering: React.FC<{
    children: ReactNode;
    isDisabled?: boolean | undefined;
} & {
    children: ReactNode;
    isDisabled?: boolean | undefined;
}>;
