import React, { useEffect } from 'react';
import invariant from 'tiny-invariant';
import { OpenLayerObserverNamespaceContext } from './open-layer-observer-namespace-context';
import { useOpenLayerObserverNamespace } from './use-open-layer-observer-namespace';

/**
 * Creates a layer namespace for grouping layers together.
 */
export function OpenLayerObserverNamespaceProvider(_ref) {
  var children = _ref.children,
    namespace = _ref.namespace;
  // If there is an existing namespace context being provided, throw an invariant.
  // This use case is not supported at this time.
  var parentContext = useOpenLayerObserverNamespace();
  useEffect(function () {
    invariant(parentContext === null, "An OpenLayerObserver namespace already exists in this component tree: ".concat(parentContext, ". Nesting OpenLayerObserverNamespaceProvider is not supported."));
  }, [parentContext]);
  return /*#__PURE__*/React.createElement(OpenLayerObserverNamespaceContext.Provider, {
    value: namespace
  }, children);
}