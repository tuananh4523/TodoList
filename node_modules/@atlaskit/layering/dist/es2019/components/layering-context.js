import React, { createContext, useContext, useEffect, useMemo, useRef } from 'react';
import __noop from '@atlaskit/ds-lib/noop';
import { componentWithFG } from '@atlaskit/platform-feature-flags-react';
import { LayerNode } from '../classes/layer-node';

/**
 *
 *  @internal
 * LevelContext which maintains the current level of nested layers
 * Default is 0
 */
export const LevelContext = /*#__PURE__*/createContext(0);

/**
 *
 *  @internal
 * LevelNodeContext maintains the current layer node of nested layers.
 * Default ref value is null
 */
export const LevelNodeContext = /*#__PURE__*/createContext({
  current: null
});

/**
 *
 *  @internal
 * RootNodeContext maintains the root node of the layer tree.
 * Default ref value is null
 */
export const RootNodeContext = /*#__PURE__*/createContext({
  current: null
});

/**
 *
 *  @internal @deprecated
 * TopLevelContext which maintains the top level ref and setTopLevel method of layers
 * Default ref value is null
 *
 */
export const TopLevelContext = /*#__PURE__*/createContext({
  topLevelRef: {
    current: null
  },
  layerList: {
    current: null
  },
  setTopLevel: __noop
});

/**
 *
 *  @internal
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
const LevelProvider = ({
  children,
  currentLevel,
  node: levelNode
}) => {
  useEffect(() => {
    const levelNodeSafe = levelNode.current;
    const parentNode = levelNodeSafe.parent;
    parentNode === null || parentNode === void 0 ? void 0 : parentNode.addChild(levelNodeSafe);
    return () => {
      parentNode === null || parentNode === void 0 ? void 0 : parentNode.removeChild(levelNodeSafe);
    };
  }, [levelNode]);
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: currentLevel
  }, /*#__PURE__*/React.createElement(LevelNodeContext.Provider, {
    value: levelNode
  }, children));
};

/**
 *
 *  @internal @deprecated
 * Context Provider Component which provider the current level of nested layers
 * It handles level management when it mounts and unmounts
 *
 */
const LevelProviderOld = ({
  children,
  currentLevel
}) => {
  const {
    layerList
  } = useContext(TopLevelContext);
  // This is not unstable, it will run once for ref creation.
  // eslint-disable-next-line  @repo/internal/react/disallow-unstable-values
  const id = useRef(Math.random().toString(36));
  useEffect(() => {
    const safeLayerList = layerList === null || layerList === void 0 ? void 0 : layerList.current;
    const safeId = id.current;
    if (!safeLayerList) {
      return;
    }
    safeLayerList.push(safeId);
    return () => {
      const index = safeLayerList.indexOf(safeId);
      if (index > -1) {
        safeLayerList.splice(index, 1);
      }
    };
  }, [layerList, id]);
  return /*#__PURE__*/React.createElement(LevelContext.Provider, {
    value: currentLevel
  }, children);
};

/**
 *
 *  @internal @deprecated
 * Context Provider Component which provides the top level of all nested layers
 * It provides initial top level ref value as 0 and set top level method
 *
 */
const LayeringProvider = ({
  children
}) => {
  const topLevelRef = useRef(0);
  const layerList = useRef([]);
  const value = useMemo(() => ({
    topLevelRef,
    setTopLevel: level => {
      topLevelRef.current = level;
    },
    layerList
  }), [topLevelRef, layerList]);
  return /*#__PURE__*/React.createElement(TopLevelContext.Provider, {
    value: value
  }, children);
};

/**
 *
 * @deprecated
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
const LayeringOld = ({
  children,
  isDisabled = true
}) => {
  const currentLevel = useContext(LevelContext);
  if (isDisabled) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  const isNested = currentLevel > 0;
  const content = /*#__PURE__*/React.createElement(LevelProviderOld, {
    currentLevel: currentLevel + 1
  }, children);
  return isNested ? content : /*#__PURE__*/React.createElement(LayeringProvider, null, content);
};

/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 *
 */
const LayeringNew = ({
  children,
  isDisabled = true
}) => {
  const currentLevel = useContext(LevelContext);
  const parentNode = useContext(LevelNodeContext);

  // eslint-disable-next-line  @repo/internal/react/disallow-unstable-values
  const newNode = useRef(new LayerNode(Math.random().toString(36), parentNode.current));
  if (isDisabled) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, children);
  }
  const isNested = currentLevel > 0;
  const content = /*#__PURE__*/React.createElement(LevelProvider, {
    currentLevel: currentLevel + 1,
    node: newNode
  }, children);
  return isNested ? content : /*#__PURE__*/React.createElement(RootNodeContext.Provider, {
    value: newNode
  }, content);
};

/**
 *
 * @important the component is toggled by isDisabled props, the default isDisabled is true
 *
 * Layering component is a wrapper to let children to consume layer contexts and hooks.
 * For more information on the implementation: https://hello.atlassian.net/wiki/x/FQCDQwE
 *
 */
export const Layering = componentWithFG('layering-tree-graph', LayeringNew, LayeringOld);