import type { LayerCloseListenerFn } from './types';
type NotifyOpenLayerObserverProps = {
    /**
     * Whether the layer is open.
     */
    isOpen: boolean;
    /**
     * Handler that is used to close this layer.
     *
     * It will be called when an OpenLayerObserver has called `closeLayers`.
     *
     * You'll want to use this to set the open state accordingly, and then pump it back into the `isOpen` prop.
     *
     * Note: the callback will only be called for _open_ layers (based on the `isOpen` prop).
     */
    onClose: LayerCloseListenerFn;
};
/**
 * Hook that increments/decrements the open layer count when the component mounts/unmounts or becomes visible/hidden.
 * It is used to "notify" the layer observer(s) that a new layer has been added/opened.
 *
 * It takes an object with two arguments:
 * - `isOpen` - used to conditionally update the layer count based on the visibility of the layered component.
 * - `onClose` - callback used to close this layer when the OpenLayerObserver has called `closeLayers`.
 *
 * Example usage:
 * ```tsx
 * const [isOpen, setIsOpen] = useState(false); // State for controlling layer visibility
 * useNotifyLayerObserver({
 *   isOpen,
 *   onClose: () => setIsOpen(false) // Optional callback to close this layer
 * });
 * ```
 */
export declare function useNotifyOpenLayerObserver({ isOpen, onClose, }: NotifyOpenLayerObserverProps): void;
export {};
