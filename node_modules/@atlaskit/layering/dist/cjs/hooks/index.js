"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCloseOnEscapePress = useCloseOnEscapePress;
exports.useLayering = useLayering;
var _react = require("react");
var _bindEventListener = require("bind-event-listener");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _layeringContext = require("../components/layering-context");
var ESCAPE = 'Escape';
/**
 * Calls back when the escape key is pressed.
 * To be used exclusively for closing layered components.
 * Use the `isDisabled` argument to ignore closing events.
 *
 * ```js
 * useCloseOnEscapePress({
 *   onClose: () => {},
 *   isDisabled: false,
 * });
 * ```
 */
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose,
    isDisabled = _ref.isDisabled;
  var escapePressed = (0, _react.useRef)(false);
  var _useLayering = useLayering(),
    isLayerDisabled = _useLayering.isLayerDisabled;
  var onKeyDown = (0, _react.useCallback)(function (e) {
    var isDisabledLayer = isLayerDisabled();
    if (isDisabled || escapePressed.current || e.key !== ESCAPE || isDisabledLayer) {
      // We're either already handling the key down event or it's not escape or disabled.
      // Bail early!
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled, isLayerDisabled]);
  var onKeyUp = (0, _react.useCallback)(function () {
    escapePressed.current = false;
  }, []);
  (0, _react.useEffect)(function () {
    return (0, _bindEventListener.bindAll)(window, [{
      type: 'keydown',
      listener: onKeyDown
    }, {
      type: 'keyup',
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}

/**
 *
 * Layering hook to get layering info like the current level, the top level of the given component
 *
 */
function useLayering() {
  var currentLevel = (0, _react.useContext)(_layeringContext.LevelContext);

  // Remove TopLevelContext on FG cleanup layering-tree-graph
  var _useContext = (0, _react.useContext)(_layeringContext.TopLevelContext),
    topLevelRef = _useContext.topLevelRef,
    layerList = _useContext.layerList;
  var layerNode;
  var rootNode;
  if ((0, _platformFeatureFlags.fg)('layering-tree-graph')) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    layerNode = (0, _react.useContext)(_layeringContext.LevelNodeContext);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    rootNode = (0, _react.useContext)(_layeringContext.RootNodeContext);
  }
  var isLayerDisabled = (0, _react.useCallback)(function () {
    var _layerList$current$le, _layerList$current;
    if ((0, _platformFeatureFlags.fg)('layering-tree-graph')) {
      var _layerNode, _rootNode;
      // This is an impossible case, added for type safety
      if (!((_layerNode = layerNode) !== null && _layerNode !== void 0 && _layerNode.current) || !((_rootNode = rootNode) !== null && _rootNode !== void 0 && _rootNode.current)) {
        return false;
      }
      return layerNode.current.getLevel() < rootNode.current.getHeight();
    }
    return ((_layerList$current$le = layerList === null || layerList === void 0 || (_layerList$current = layerList.current) === null || _layerList$current === void 0 ? void 0 : _layerList$current.length) !== null && _layerList$current$le !== void 0 ? _layerList$current$le : 0) !== currentLevel;
  }, [currentLevel, layerList, layerNode, rootNode]);
  var getTopLevel = (0, _react.useCallback)(function () {
    var _rootNode2;
    return (_rootNode2 = rootNode) !== null && _rootNode2 !== void 0 && _rootNode2.current ? rootNode.current.getHeight() : null;
  }, [rootNode]);
  return (0, _platformFeatureFlags.fg)('layering-tree-graph') ? {
    currentLevel: currentLevel,
    isLayerDisabled: isLayerDisabled,
    getTopLevel: getTopLevel
  } : {
    currentLevel: currentLevel,
    topLevelRef: topLevelRef,
    isLayerDisabled: isLayerDisabled,
    layerList: layerList
  };
}