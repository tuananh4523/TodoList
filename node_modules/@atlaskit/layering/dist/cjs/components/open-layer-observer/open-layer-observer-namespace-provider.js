"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OpenLayerObserverNamespaceProvider = OpenLayerObserverNamespaceProvider;
var _react = _interopRequireWildcard(require("react"));
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _openLayerObserverNamespaceContext = require("./open-layer-observer-namespace-context");
var _useOpenLayerObserverNamespace = require("./use-open-layer-observer-namespace");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
/**
 * Creates a layer namespace for grouping layers together.
 */
function OpenLayerObserverNamespaceProvider(_ref) {
  var children = _ref.children,
    namespace = _ref.namespace;
  // If there is an existing namespace context being provided, throw an invariant.
  // This use case is not supported at this time.
  var parentContext = (0, _useOpenLayerObserverNamespace.useOpenLayerObserverNamespace)();
  (0, _react.useEffect)(function () {
    (0, _tinyInvariant.default)(parentContext === null, "An OpenLayerObserver namespace already exists in this component tree: ".concat(parentContext, ". Nesting OpenLayerObserverNamespaceProvider is not supported."));
  }, [parentContext]);
  return /*#__PURE__*/_react.default.createElement(_openLayerObserverNamespaceContext.OpenLayerObserverNamespaceContext.Provider, {
    value: namespace
  }, children);
}