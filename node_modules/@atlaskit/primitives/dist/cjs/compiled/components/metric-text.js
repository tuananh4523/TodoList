/* metric-text.tsx generated by @compiled/babel-plugin v0.36.1 */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("./metric-text.compiled.css");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _runtime = require("@compiled/react/runtime");
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var asAllowlist = ['span', 'div'];
var styles = {
  root: "_19pkidpf _2hwxidpf _otyridpf _18u0idpf",
  'textAlign.center': "_y3gn1h6o",
  'textAlign.end': "_y3gnh9n0",
  'textAlign.start': "_y3gnv2br"
};
var fontSizeMap = {
  small: "_11c8h56o",
  medium: "_11c81lu7",
  large: "_11c81r7r"
};

/**
 * __MetricText__
 *
 * MetricText is a primitive component that has the Atlassian Design System's design guidelines baked in.
 * It is designed for use specifically with displaying metrics and is not to be used for headings or general UI text.
 * It renders a `span` by default.
 *
 * @internal
 */
var MetricText = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _ref$as = _ref.as,
    Component = _ref$as === void 0 ? 'span' : _ref$as,
    align = _ref.align,
    testId = _ref.testId,
    id = _ref.id,
    size = _ref.size,
    children = _ref.children;
  (0, _tinyInvariant.default)(asAllowlist.includes(Component), "@atlaskit/primitives: MetricText received an invalid \"as\" value of \"".concat(Component, "\""));
  var component = /*#__PURE__*/React.createElement(Component, {
    ref: ref,
    "data-testid": testId,
    id: id,
    className: (0, _runtime.ax)([styles.root, size && fontSizeMap[size], align && styles["textAlign.".concat(align)]])
  }, children);
  return component;
});
var _default = exports.default = MetricText;