"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = once;
/**
 * Creates a new function that will cache the result of it's first call.
 *
 * ```ts
 * function sayHello(name: string): string {
 *   return `Hello ${name}`;
 * }
 * const cached = once(sayHello);
 *
 * cached('Alex'); // returns "Hello Alex"
 * cached('Sam'); // returns "Hello Alex" (underlying `sayHello` function not called)
 * ```
 *
 * **Notes**
 *
 * - If the `onced` function throws, then the return value of the function is not cached
 * - Respects call site context (`this`) when executing the onced function
 */
function once(fn) {
  var cache = null;
  return function result() {
    if (!cache) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      cache = {
        value: fn.call.apply(fn, [this].concat(args))
      };
    }

    /**
     * Intentionally not adding `.clear()` function property
     *
     * - We currently have no need for it
     * - We don't want to add a `.clear()` to functions that should never be called twice,
     *   for example: `cleanup` functions.
     * - We can add a `onceWithCleanup` variant as a separate export from ds-lib if the
     *   need arises ðŸ§˜
     */

    return cache.value;
  };
}