import React, { type ReactNode } from 'react';
type SeedGenerator = (id: any) => string;
/**
 * Returns a unique id
 *
 * React 18 SSR and Concurrent modes are supported when the `platform-dst-react-18-use-id` flag is enabled.
 * This is an interop function that supports React 16 and 18.
 *
 * If migrating from `useUID` in the `react-uid` package, then `useId` is a direct replacement.
 *
 * @return string
 * @see {@link useIdSeed}
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @private We intend to deprecate and replace with `useId()` directly
 * @example
 * const id = useUID();
 * id == "r1"; // for example
 *
 * Parts of the above are from: https://github.com/thearnica/react-uid/blob/0f507fbbdb1ab84acf477ec32698afe3d2191e49/src/hooks.ts#L41C1-L49C4
 */
export declare function useId(): string;
export interface IdProviderProps {
    /**
     * Children to render.
     * Maybe a function that receives the unique id as an argument.
     */
    children: ReactNode | ((props: {
        id: string;
    }) => ReactNode);
    /**
     * A prefix to be added to the generated id.
     */
    prefix?: string;
    /**
     * A postfix to be added to the generated id.
     */
    postfix?: string;
}
/**
 * A wrapper component that allows access to an id generated by useId within a class component.
 *
 * This component is only intended for class components,
 * functional components should use the useId hook directly.
 *
 * @component
 * @param {IdProviderProps} props
 * @private We intend to deprecate and replace with `useId()` directly
 * @example
 * Child as function
 * ```jsx
 * class Example extends React.Component {
 *   render() {
 *     return (
 *       <IdProvider>
 *         {({ id }) => (<div id={id}>Hello</div>)}
 *       </IdProvider>
 *     );
 *   }
 * }
 * ```
 *
 * @example
 * Ref object
 * ```jsx
 * class Example extends React.Component {
 *   readonly useIdRef = React.createRef<string>();
 *   render() {
 *     return (
 *       <IdProvider ref={this.useIdRef}>
 *         <div id={this.useIdRef.current}>Hello</div>
 *       </IdProvider>
 *     );
 *   }
 * }
 *
 * @example
 * Ref as callback
 * ```jsx
 * class Example extends React.Component {
 *   id = '';
 *   setId = (id: string) => {
 *     this.id = id;
 *   };
 *   render() {
 *     return (
 *       <IdProvider ref={this.setId}>
 *         <div id={this.id}>Hello</div>
 *       </IdProvider>
 *     );
 *   }
 * }
 * ```
 */
export declare const IdProvider: React.ForwardRefExoticComponent<IdProviderProps & React.RefAttributes<string>>;
/**
 * Returns an id generator
 *
 * React 18 SSR and Concurrent modes are supported when the `platform-dst-react-18-use-id` flag is enabled.
 * This is an interop function that supports React 16 and 18.
 *
 * If migrating from `useUIDSeed` in the `react-uid` package, then `useIdSeed` is a direct replacement.
 *
 * "If you need to give IDs to multiple related elements, you can call useId to generate a shared prefix for them" - From React
 * This function will help to implement the above.
 * @return (id: any) => string
 * @see https://react.dev/reference/react/useId#generating-ids-for-several-related-elements
 * @see https://github.com/thearnica/react-uid#hooks-168
 * @private We intend to deprecate and replace with `useId()` directly
 * @example
 * import { useIdSeed } from '@atlaskit/ds-lib/use-id';
 *
 * export default function Form() {
 * 	 const idSeed = useIdSeed();
 *   return (
 *     <form>
 *       <label htmlFor={idSeed('firstName')}>First Name:</label>
 *       <input id={idSeed('firstName')} type="text" />
 *       <hr />
 *       <label htmlFor={idSeed('lastName')}>Last Name:</label>
 *       <input id={idSeed('lastName')} type="text" />
 *     </form>
 *   );
 * }
 */
export declare function useIdSeed(): SeedGenerator;
export {};
