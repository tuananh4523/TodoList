"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseAtlCtxCookies = parseAtlCtxCookies;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _constants = require("../../common/constants");
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
/**
 * Internal helper function used to parse cookie values and extract value of provided cookie name
 * @param {AtlCtxCookieName} cookieName - The name of the cookie to extract
 * @param {string} cookieString - The full cookie string
 * @returns {string | undefined} - The cookie value if present, undefined otherwise
 */
function getRawCookieValue(cookieName, cookieString) {
  if (!cookieString) {
    return undefined;
  }
  var cookies = cookieString.split(';');
  var _iterator = _createForOfIteratorHelper(cookies),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var cookie = _step.value;
      var _cookie$trim$split = cookie.trim().split('='),
        _cookie$trim$split2 = (0, _slicedToArray2.default)(_cookie$trim$split, 2),
        name = _cookie$trim$split2[0],
        value = _cookie$trim$split2[1];
      if (name === cookieName) {
        return value;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return undefined;
}

/**
 * Internal helper function used to return the atl-ctx cookies (which contains perimeter and ic_domain information).
 * Cookies are NOT set for regular commercial traffic.
 * @returns {AtlCtxCookieValues | undefined} - The parsed cookie contents or undefined if parsing fails (ex. if the cookies do not exist)
 */
function parseAtlCtxCookies() {
  var global = globalThis;
  try {
    // HOT-118791: the code below doesn't work on the server, and creates log spam in the catch block - "Cannot read properties of undefined (reading 'cookie')"
    if (typeof globalThis.document === 'undefined') {
      return undefined;
    }
    var cookies = global.document.cookie;
    var perimeter = getRawCookieValue(_constants.ATL_CTX_PERIMETER, cookies);
    if (!perimeter) {
      // Indicative of non-isolated commercial perimeter
      return undefined;
    }
    var icDomain = getRawCookieValue(_constants.ATL_CTX_ISOLATION_CONTEXT_DOMAIN, cookies);
    var icId = getRawCookieValue(_constants.ATL_CTX_ISOLATION_CONTEXT_ID, cookies);

    // The IC Domain and IC Id cookie values are empty strings for non Isolated Cloud
    var emptyIcDomain = !icDomain || icDomain.length === 0;
    var emptyIcId = !icId || icId.length === 0;
    return {
      perimeter: perimeter,
      icDomain: emptyIcDomain ? undefined : icDomain,
      icId: emptyIcId ? undefined : icId
    };
  } catch (e) {
    console.warn('Failed to parse atl-ctx cookies:', e);
    return undefined;
  }
}