"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nonIsolatedCloudFunctions = exports.isolatedCloudFunctions = exports.ReservedNameMapping = exports.AtlDomainMapping = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _constants = require("../../common/constants");
/**
 * Contains list of Atlassian experiences that have a reserved name.
 * For Oasis EAP, reserved names are assumed to exist in every IC.
 */
var ReservedNameMapping = exports.ReservedNameMapping = (0, _defineProperty2.default)({}, _constants.COMMERCIAL, ['home', 'start', 'id', 'api', 'admin', 'auth', 'bitbucket']);

/**
 * Contains list of Atlassian experiences that use the Atlassian namespace subdomain.
 */
var AtlDomainMapping = exports.AtlDomainMapping = (0, _defineProperty2.default)({}, _constants.COMMERCIAL, ['packages']);

/**
 * Contains the domain patterns for each isolated cloud perimeter
 */
var isolatedCloudFunctions = exports.isolatedCloudFunctions = (0, _defineProperty2.default)({}, _constants.COMMERCIAL, {
  isolatedCloudReservedNameDomain: function isolatedCloudReservedNameDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".").concat(isolatedCloudDomain);
  },
  isolatedCloudAtlDomain: function isolatedCloudAtlDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".atl.").concat(isolatedCloudDomain);
  },
  isolatedCloudVanityDomain: function isolatedCloudVanityDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".services.").concat(isolatedCloudDomain);
  }
});

/**
 * Contains the domain patterns for each non-isolated cloud perimeter and environment
 */
var nonIsolatedCloudFunctions = exports.nonIsolatedCloudFunctions = (0, _defineProperty2.default)((0, _defineProperty2.default)({}, _constants.COMMERCIAL, {
  defaultDomainEnding: function defaultDomainEnding(subdomain, envType) {
    switch (envType) {
      case _constants.PRODUCTION:
        return "".concat(subdomain, ".atlassian.com");
      case _constants.STAGING:
        return "".concat(subdomain, ".stg.atlassian.com");
      case _constants.DEV:
        return "".concat(subdomain, ".dev.atlassian.com");
      default:
        console.warn("Cannot get non-isolated commercial domain for provided environment, ".concat(envType, " is unsupported"));
        return '';
    }
  }
}), _constants.FEDRAMP_MODERATE, {
  defaultDomainEnding: function defaultDomainEnding(subdomain, envType) {
    switch (envType) {
      case _constants.PRODUCTION:
        return "".concat(subdomain, ".atlassian-us-gov-mod.com");
      case _constants.STAGING:
        return "".concat(subdomain, ".stg.atlassian-us-gov-mod.com");
      default:
        console.warn("Cannot get fedramp-moderate domain for provided environment, ".concat(envType, " is unsupported"));
        return '';
    }
  }
});