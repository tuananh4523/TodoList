import { COMMERCIAL, DEV, FEDRAMP_MODERATE, PRODUCTION, STAGING } from '../../common/constants';
/**
 * Contains list of Atlassian experiences that have a reserved name.
 * For Oasis EAP, reserved names are assumed to exist in every IC.
 */
export const ReservedNameMapping = {
  [COMMERCIAL]: ['home', 'start', 'id', 'api', 'admin', 'auth', 'bitbucket']
};

/**
 * Contains list of Atlassian experiences that use the Atlassian namespace subdomain.
 */
export const AtlDomainMapping = {
  [COMMERCIAL]: ['packages']
};

/**
 * Contains the domain patterns for each isolated cloud perimeter
 */
export const isolatedCloudFunctions = {
  [COMMERCIAL]: {
    isolatedCloudReservedNameDomain: (subdomain, isolatedCloudDomain) => `${subdomain}.${isolatedCloudDomain}`,
    isolatedCloudAtlDomain: (subdomain, isolatedCloudDomain) => `${subdomain}.atl.${isolatedCloudDomain}`,
    isolatedCloudVanityDomain: (subdomain, isolatedCloudDomain) => `${subdomain}.services.${isolatedCloudDomain}`
  }
};

/**
 * Contains the domain patterns for each non-isolated cloud perimeter and environment
 */
export const nonIsolatedCloudFunctions = {
  [COMMERCIAL]: {
    defaultDomainEnding: (subdomain, envType) => {
      switch (envType) {
        case PRODUCTION:
          return `${subdomain}.atlassian.com`;
        case STAGING:
          return `${subdomain}.stg.atlassian.com`;
        case DEV:
          return `${subdomain}.dev.atlassian.com`;
        default:
          console.warn(`Cannot get non-isolated commercial domain for provided environment, ${envType} is unsupported`);
          return '';
      }
    }
  },
  [FEDRAMP_MODERATE]: {
    defaultDomainEnding: (subdomain, envType) => {
      switch (envType) {
        case PRODUCTION:
          return `${subdomain}.atlassian-us-gov-mod.com`;
        case STAGING:
          return `${subdomain}.stg.atlassian-us-gov-mod.com`;
        default:
          console.warn(`Cannot get fedramp-moderate domain for provided environment, ${envType} is unsupported`);
          return '';
      }
    }
  }
};