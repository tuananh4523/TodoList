import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { COMMERCIAL, DEV, FEDRAMP_MODERATE, PRODUCTION, STAGING } from '../../common/constants';
/**
 * Contains list of Atlassian experiences that have a reserved name.
 * For Oasis EAP, reserved names are assumed to exist in every IC.
 */
export var ReservedNameMapping = _defineProperty({}, COMMERCIAL, ['home', 'start', 'id', 'api', 'admin', 'auth', 'bitbucket']);

/**
 * Contains list of Atlassian experiences that use the Atlassian namespace subdomain.
 */
export var AtlDomainMapping = _defineProperty({}, COMMERCIAL, ['packages']);

/**
 * Contains the domain patterns for each isolated cloud perimeter
 */
export var isolatedCloudFunctions = _defineProperty({}, COMMERCIAL, {
  isolatedCloudReservedNameDomain: function isolatedCloudReservedNameDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".").concat(isolatedCloudDomain);
  },
  isolatedCloudAtlDomain: function isolatedCloudAtlDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".atl.").concat(isolatedCloudDomain);
  },
  isolatedCloudVanityDomain: function isolatedCloudVanityDomain(subdomain, isolatedCloudDomain) {
    return "".concat(subdomain, ".services.").concat(isolatedCloudDomain);
  }
});

/**
 * Contains the domain patterns for each non-isolated cloud perimeter and environment
 */
export var nonIsolatedCloudFunctions = _defineProperty(_defineProperty({}, COMMERCIAL, {
  defaultDomainEnding: function defaultDomainEnding(subdomain, envType) {
    switch (envType) {
      case PRODUCTION:
        return "".concat(subdomain, ".atlassian.com");
      case STAGING:
        return "".concat(subdomain, ".stg.atlassian.com");
      case DEV:
        return "".concat(subdomain, ".dev.atlassian.com");
      default:
        console.warn("Cannot get non-isolated commercial domain for provided environment, ".concat(envType, " is unsupported"));
        return '';
    }
  }
}), FEDRAMP_MODERATE, {
  defaultDomainEnding: function defaultDomainEnding(subdomain, envType) {
    switch (envType) {
      case PRODUCTION:
        return "".concat(subdomain, ".atlassian-us-gov-mod.com");
      case STAGING:
        return "".concat(subdomain, ".stg.atlassian-us-gov-mod.com");
      default:
        console.warn("Cannot get fedramp-moderate domain for provided environment, ".concat(envType, " is unsupported"));
        return '';
    }
  }
});