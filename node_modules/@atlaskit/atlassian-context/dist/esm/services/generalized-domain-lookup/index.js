import { COMMERCIAL, ISOLATED_CLOUD_PERIMETERS, NON_ISOLATED_CLOUD_PERIMETERS, PRODUCTION } from '../../common/constants';
import { fullDomainOverride, globalDomains } from '../../common/constants/domains';
import { parseAtlCtxCookies } from '../atl-cookies-lookup';
import { AtlDomainMapping, isolatedCloudFunctions, nonIsolatedCloudFunctions, ReservedNameMapping } from './constants';

/**
 *
 * Gets the full domain for an Atlassian experience in the context of the current request.
 * Returns undefined only when a new perimeter has been created that is not yet supported by the atlassian-context library.
 *
 * For Non Isolated Cloud, the domain will be determined by the perimeter and environment combination unless the subdomain belongs in the list of global domains or overrides.
 * For Isolated Cloud, the domain type defaults to the vanity name pattern.
 *
 * Warning: Currently unsupported in SSR for the time-being.
 *
 * @param subdomain - The Atlassian experience subdomain
 * @param envType - The environment to get the domain for ('dev', 'staging', or 'prod'). When in Isolated Cloud, the same value will be returned for all env types.
 * @returns The full domain associated with the subdomain for the given environment
 */
export function getDomainInContext(subdomain, envType) {
  var atlCtxCookieValues = parseAtlCtxCookies();

  // Form domain for non-isolated commercial
  if (atlCtxCookieValues === undefined) {
    return getDomainForNonIsolatedCloud(subdomain, COMMERCIAL, envType);
  }

  // Cookie values validity check
  var isIsolatedCloudPerimeterType = ISOLATED_CLOUD_PERIMETERS.includes(atlCtxCookieValues.perimeter);
  var isNonIsolatedCloudPerimeterType = NON_ISOLATED_CLOUD_PERIMETERS.includes(atlCtxCookieValues.perimeter);
  if (!isIsolatedCloudPerimeterType && !isNonIsolatedCloudPerimeterType) {
    console.warn("Atl Ctx cookies are passing in invalid perimeter ".concat(atlCtxCookieValues.perimeter));
    return undefined;
  }

  // Form domain for isolated-cloud
  var isIsolatedCloud = isIsolatedCloudPerimeterType && atlCtxCookieValues.icDomain !== undefined;
  if (isIsolatedCloud) {
    var _perimeter = atlCtxCookieValues.perimeter;
    return getDomainForIsolatedCloud(subdomain, _perimeter, atlCtxCookieValues);
  }

  // Form domain for non-isolated, non-commercial perimeter (aka fedramp)
  var perimeter = atlCtxCookieValues.perimeter;
  return getDomainForNonIsolatedCloud(subdomain, perimeter, envType);
}

/**
 * Gets the full Isolated Cloud domain
 * Returns undefined only if ic_domain cannot be determined from the atl-ctx cookies
 * Defaults to returning the vanity name pattern
 * @param subdomain - The Atlassian experience subdomain
 * @param perimeter - The Isolated Cloud perimeter to get the domain for
 * @param atlCtxCookieValues - The atl-ctx cookie to get the IC domain from
 * @returns The full domain associated with the subdomain in a specific IC
 */
function getDomainForIsolatedCloud(subdomain, perimeter, atlCtxCookieValues) {
  var domainMappings = isolatedCloudFunctions[perimeter];
  var isolatedCloudDomain = atlCtxCookieValues.icDomain;
  if (!isolatedCloudDomain) {
    console.warn('No isolated cloud domain found in atl-ctx cookie values');
    return undefined;
  }
  if (ReservedNameMapping[perimeter].includes(subdomain)) {
    return domainMappings.isolatedCloudReservedNameDomain(subdomain, isolatedCloudDomain);
  }
  if (AtlDomainMapping[perimeter].includes(subdomain)) {
    return domainMappings.isolatedCloudAtlDomain(subdomain, isolatedCloudDomain);
  }
  return domainMappings.isolatedCloudVanityDomain(subdomain, isolatedCloudDomain);
}

/**
 * Gets the full domain in an non-Isolated Cloud perimeter
 *
 * @param subdomain - The Atlassian experience subdomain
 * @param perimeter - The non-isolated cloud perimeter to get the domain for
 * @param The environment to get the domain for ('dev', 'staging', or 'prod'). When in Isolated Cloud, the same value will be returned for all env types.
 * @returns The full domain associated with the subdomain for the given perimeter and environment
 */
function getDomainForNonIsolatedCloud(subdomain, perimeter, envType) {
  // First, check if the subdomain is associated with a global domain
  if (globalDomains[subdomain]) {
    return globalDomains[subdomain];
  }

  // Second, check if the subdomain is associated with a full domain override (ex. a domain that uses a different pattern in other perimeters/environments)
  var override = fullDomainOverride[subdomain];
  if (override) {
    var _override$perimeter$e, _override$perimeter;
    return (_override$perimeter$e = (_override$perimeter = override[perimeter]) === null || _override$perimeter === void 0 ? void 0 : _override$perimeter[envType]) !== null && _override$perimeter$e !== void 0 ? _override$perimeter$e : override[COMMERCIAL][PRODUCTION] // Default to commercial production if no environment-specific override is found
    ;
  }

  // Use default domain ending for the given perimeter
  var domainMappings = nonIsolatedCloudFunctions[perimeter];
  return domainMappings.defaultDomainEnding(subdomain, envType);
}

/**
 *
 * Gets the full URL for an Atlassian experience in the context of the current request
 * Returns undefined only when a new perimeter has been created that is not yet supported by the atlassian-context library
 *
 * Warning: Currently unsupported in SSR for the time-being.
 * @param subdomain - The Atlassian experience subdomain
 * @param The environment to get the domain for ('dev', 'staging', or 'prod'). When in Isolated Cloud, the same value will be returned for all env types.
 * @returns The full URL for the given subdomain and environment
 */
export function getUrlForDomainInContext(subdomain, envType) {
  var domain = getDomainInContext(subdomain, envType);
  if (!domain) {
    console.warn("Domain could not be determined for requested subdomain: ".concat(subdomain));
    return undefined;
  }
  return "".concat(globalThis.location.protocol, "//").concat(domain);
}