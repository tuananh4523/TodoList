/**
 * Returns one of functions depending on a boolean condition.
 * Both functions should have the same signature.
 * @see {@link functionUnionWithCondition} for functions with different return types
 */

export function functionWithCondition(condition, functionTrue, functionFalse) {
  var fnWithCondition = function fnWithCondition() {
    return condition() ? functionTrue.apply(void 0, arguments) : functionFalse.apply(void 0, arguments);
  };
  // Improvement: set name on a function. Requires external helper, not required for production

  return fnWithCondition;
}

/**
 * Returns one of functions depending on a boolean condition.
 * Both functions should have the same input arguments, but might have different returns.
 * @see {@link functionWithCondition} for functions with similar return types
 */

export function functionUnionWithCondition(condition, functionTrue, functionFalse) {
  // @ts-expect-error TS2345: Argument of type '(...args: C) => R2' is not assignable to parameter of type '(...args: C) => R1'.
  return functionWithCondition(condition, functionTrue, functionFalse);
}