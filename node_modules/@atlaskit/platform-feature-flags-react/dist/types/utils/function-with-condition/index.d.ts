/**
 * Returns one of functions depending on a boolean condition.
 * Both functions should have the same signature.
 * @see {@link functionUnionWithCondition} for functions with different return types
 */
export declare function functionWithCondition<Fn extends (...args: any[]) => any>(condition: () => boolean, functionTrue: Fn, functionFalse: Fn): Fn;
/**
 * Returns one of functions depending on a boolean condition.
 * Both functions should have the same input arguments, but might have different returns.
 * @see {@link functionWithCondition} for functions with similar return types
 */
export declare function functionUnionWithCondition<Arguments extends any[], R1, R2>(condition: () => boolean, functionTrue: (...args: Arguments) => R1, functionFalse: (...args: Arguments) => R2): (...args: Arguments) => R1 | R2;
