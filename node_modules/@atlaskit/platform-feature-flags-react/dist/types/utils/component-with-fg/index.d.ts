import type { ComponentType } from 'react';
export declare const componentWithFG: <A extends {}, B extends {}>(featureFlagName: string, ComponentTrue: ComponentType<A>, ComponentFalse: ComponentType<B>) => import("react").FC<import("react").PropsWithoutRef<A> & import("react").PropsWithoutRef<B> & (import("react").PropsWithRef<A> extends infer T ? T extends import("react").PropsWithRef<A> ? T extends import("react").RefAttributes<infer RefA> ? import("react").PropsWithRef<B> extends infer T_1 ? T_1 extends import("react").PropsWithRef<B> ? T_1 extends import("react").RefAttributes<infer RefB> ? import("react").RefAttributes<RefA | RefB> : import("react").RefAttributes<RefA> : never : never : import("react").PropsWithRef<B> extends infer T_2 ? T_2 extends import("react").PropsWithRef<B> ? T_2 extends import("react").RefAttributes<infer OnlyRefB> ? import("react").RefAttributes<OnlyRefB> : unknown : never : never : never : never)>;
