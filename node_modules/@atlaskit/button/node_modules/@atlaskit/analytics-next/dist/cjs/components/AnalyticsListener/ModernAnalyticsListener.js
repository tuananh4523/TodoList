"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _analyticsNextStableReactContext = _interopRequireDefault(require("@atlaskit/analytics-next-stable-react-context"));
var _useAnalyticsContext2 = require("../../hooks/useAnalyticsContext");
var _useTrackedRef = require("../../hooks/useTrackedRef");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AnalyticsListener = function AnalyticsListener(_ref) {
  var children = _ref.children,
    channel = _ref.channel,
    onEvent = _ref.onEvent;
  var _useAnalyticsContext = (0, _useAnalyticsContext2.useAnalyticsContext)(),
    _useAnalyticsContext$ = _useAnalyticsContext.getAtlaskitAnalyticsEventHandlers,
    getAtlaskitAnalyticsEventHandlers = _useAnalyticsContext$ === void 0 ? function () {
      return [];
    } : _useAnalyticsContext$,
    getAtlaskitAnalyticsContext = _useAnalyticsContext.getAtlaskitAnalyticsContext;
  var onEventRef = (0, _useTrackedRef.useTrackedRef)(onEvent);
  var channelRef = (0, _useTrackedRef.useTrackedRef)(channel);
  var getAnalyticsEventHandlers = (0, _react.useCallback)(function () {
    var thisHandler = function thisHandler(event, eventChannel) {
      if (channelRef.current === '*' || channelRef.current === eventChannel) {
        onEventRef.current(event, eventChannel);
      }
    };
    return [thisHandler].concat((0, _toConsumableArray2.default)(getAtlaskitAnalyticsEventHandlers()));
  }, [channelRef, onEventRef, getAtlaskitAnalyticsEventHandlers]);
  var value = (0, _react.useMemo)(function () {
    return {
      getAtlaskitAnalyticsContext: getAtlaskitAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: getAnalyticsEventHandlers
    };
  }, [getAtlaskitAnalyticsContext, getAnalyticsEventHandlers]);
  return /*#__PURE__*/_react.default.createElement(_analyticsNextStableReactContext.default.Provider, {
    value: value
  }, children);
};
var _default = exports.default = AnalyticsListener;