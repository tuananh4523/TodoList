"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _bindEventListener = require("bind-event-listener");
var _analyticsNext = require("@atlaskit/analytics-next");
var _noop = _interopRequireDefault(require("@atlaskit/ds-lib/noop"));
var _useCloseOnEscapePress = _interopRequireDefault(require("@atlaskit/ds-lib/use-close-on-escape-press"));
var _useStableRef = _interopRequireDefault(require("@atlaskit/ds-lib/use-stable-ref"));
var _openLayerObserver = require("@atlaskit/layering/experimental/open-layer-observer");
var _motion = require("@atlaskit/motion");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _popper = require("@atlaskit/popper");
var _portal = _interopRequireDefault(require("@atlaskit/portal"));
var _constants = require("@atlaskit/theme/constants");
var _dragManager = require("./internal/drag-manager");
var _tooltipManager = require("./internal/tooltip-manager");
var _useUniqueId = _interopRequireDefault(require("./internal/use-unique-id"));
var _tooltipContainer = _interopRequireDefault(require("./tooltip-container"));
var _utilities = require("./utilities");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var tooltipZIndex = _constants.layers.tooltip();
var analyticsAttributes = {
  componentName: 'tooltip',
  packageName: "@atlaskit/tooltip",
  packageVersion: "20.4.0"
};

// Inverts motion direction
var invertedDirection = {
  top: 'bottom',
  bottom: 'top',
  left: 'right',
  right: 'left'
};

/**
 * Converts a Popper placement to it's general direction.
 *
 * @param placement - Popper Placement value, e.g. 'top-start'
 * @returns Popper Direction, e.g. 'top'
 */
var getDirectionFromPlacement = function getDirectionFromPlacement(placement) {
  return placement.split('-')[0];
};
/**
 * __Tooltip__
 *
 * A tooltip is a floating, non-actionable label used to explain a user interface element or feature.
 */
function Tooltip(_ref) {
  var children = _ref.children,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? 'bottom' : _ref$position,
    _ref$mousePosition = _ref.mousePosition,
    mousePosition = _ref$mousePosition === void 0 ? 'bottom' : _ref$mousePosition,
    content = _ref.content,
    _ref$truncate = _ref.truncate,
    truncate = _ref$truncate === void 0 ? false : _ref$truncate,
    _ref$component = _ref.component,
    Container = _ref$component === void 0 ? _tooltipContainer.default : _ref$component,
    _ref$tag = _ref.tag,
    TargetContainer = _ref$tag === void 0 ? 'div' : _ref$tag,
    testId = _ref.testId,
    _ref$delay = _ref.delay,
    delay = _ref$delay === void 0 ? 300 : _ref$delay,
    _ref$onShow = _ref.onShow,
    onShow = _ref$onShow === void 0 ? _noop.default : _ref$onShow,
    _ref$onHide = _ref.onHide,
    onHide = _ref$onHide === void 0 ? _noop.default : _ref$onHide,
    canAppear = _ref.canAppear,
    _ref$hideTooltipOnCli = _ref.hideTooltipOnClick,
    hideTooltipOnClick = _ref$hideTooltipOnCli === void 0 ? false : _ref$hideTooltipOnCli,
    _ref$hideTooltipOnMou = _ref.hideTooltipOnMouseDown,
    hideTooltipOnMouseDown = _ref$hideTooltipOnMou === void 0 ? false : _ref$hideTooltipOnMou,
    analyticsContext = _ref.analyticsContext,
    _ref$strategy = _ref.strategy,
    strategy = _ref$strategy === void 0 ? 'fixed' : _ref$strategy,
    _ref$ignoreTooltipPoi = _ref.ignoreTooltipPointerEvents,
    ignoreTooltipPointerEvents = _ref$ignoreTooltipPoi === void 0 ? false : _ref$ignoreTooltipPoi,
    _ref$isScreenReaderAn = _ref.isScreenReaderAnnouncementDisabled,
    isScreenReaderAnnouncementDisabled = _ref$isScreenReaderAn === void 0 ? false : _ref$isScreenReaderAn;
  var tooltipPosition = position === 'mouse' ? mousePosition : position;
  var onShowHandler = (0, _analyticsNext.usePlatformLeafSyntheticEventHandler)(_objectSpread({
    fn: onShow,
    action: 'displayed',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onHideHandler = (0, _analyticsNext.usePlatformLeafSyntheticEventHandler)(_objectSpread({
    fn: onHide,
    action: 'hidden',
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var apiRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)('hide'),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var targetRef = (0, _react.useRef)(null);
  var containerRef = (0, _react.useRef)(null);

  // This function is deliberately _not_ memoized as it needs to re-run every render
  // to pick up any child ref changes. If you use render props you don't have this issue.
  var setImplicitRefFromChildren = function setImplicitRefFromChildren(node) {
    containerRef.current = node;
    targetRef.current = node ? node.firstElementChild : null;
  };

  // This is memoized and passed into the render props callback.
  var setDirectRef = (0, _react.useCallback)(function (node) {
    targetRef.current = node;
  }, []);

  // Putting a few things into refs so that we don't have to break memoization
  var stableState = (0, _useStableRef.default)(state);
  // These props are placed in separate refs instead of a single object to reduce memory usage.
  // Placing them in the same object previously caused an increase in the number of JavaScript event listeners
  // before garbage collection.
  var onShowHandlerStable = (0, _useStableRef.default)(onShowHandler);
  var onHideHandlerStable = (0, _useStableRef.default)(onHideHandler);
  var delayStable = (0, _useStableRef.default)(delay);
  var canAppearStable = (0, _useStableRef.default)(canAppear);
  var hasCalledShowHandler = (0, _react.useRef)(false);
  var start = (0, _react.useCallback)(function (api) {
    // @ts-ignore
    apiRef.current = api;
    hasCalledShowHandler.current = false;
  }, []);
  var done = (0, _react.useCallback)(function () {
    if (!apiRef.current) {
      return;
    }
    // Only call onHideHandler if we have called onShowHandler
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    // @ts-ignore
    apiRef.current = null;
    // @ts-ignore
    hasCalledShowHandler.current = false;
    // just in case
    setState('hide');
  }, [onHideHandlerStable]);
  var abort = (0, _react.useCallback)(function () {
    if (!apiRef.current) {
      return;
    }
    apiRef.current.abort();
    // Only call onHideHandler if we have called onShowHandler
    if (hasCalledShowHandler.current) {
      onHideHandlerStable.current();
    }
    // @ts-ignore
    apiRef.current = null;
  }, [onHideHandlerStable]);
  (0, _react.useEffect)(function mount() {
    return function unmount() {
      if (apiRef.current) {
        abort();
      }
    };
  }, [abort]);
  var isDraggingRef = (0, _react.useRef)(false);
  (0, _react.useEffect)(function () {
    return (0, _dragManager.register)({
      onRegister: function onRegister(_ref2) {
        var isDragging = _ref2.isDragging;
        isDraggingRef.current = isDragging;
      },
      onDragStart: function onDragStart() {
        var _apiRef$current;
        /**
         * Hiding any visible tooltips when a drag starts because otherwise it
         * looks janky (disappears and reappears), and is not required.
         */
        (_apiRef$current = apiRef.current) === null || _apiRef$current === void 0 || _apiRef$current.requestHide({
          isImmediate: true
        });
        isDraggingRef.current = true;
      },
      onDragEnd: function onDragEnd() {
        isDraggingRef.current = false;
      }
    });
  }, []);
  var tryShowTooltip = (0, _react.useCallback)(function (source) {
    var _canAppearStable$curr;
    /**
     * Prevent tooltips from being shown during a drag. This can occur with
     * the native drag and drop API, where some pointer events can fire
     * when they should not and lead to jank with tooltips.
     */
    if (isDraggingRef.current) {
      return;
    }

    // Another tooltip is has been active but we still have the old `api`
    // around. We need to finish up the last usage.
    // Note: just being safe - this should not happen
    if (apiRef.current && !apiRef.current.isActive()) {
      abort();
    }

    // This tooltip is already active, we can exit
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }

    /**
     * Check if tooltip is allowed to show.
     *
     * Once a tooltip has started, or has scheduled to start
     * we won't be checking `canAppear` again.
     *
     * - We don't want tooltips to disappear once they are shown
     * - For consistency, we start after a single positive `canAppear`.
     *   Otherwise the amount of times we ask consumers would depend on
     *   how many times we get a "mousemove", which _could_ lead to situations
     *   where moving the mouse could result in a different outcome to if
     *   the mouse was not moved.
     */
    if (canAppearStable.current && !((_canAppearStable$curr = canAppearStable.current) !== null && _canAppearStable$curr !== void 0 && _canAppearStable$curr.call(canAppearStable))) {
      return;
    }
    var entry = {
      source: source,
      delay: delayStable.current,
      show: function show(_ref3) {
        var isImmediate = _ref3.isImmediate;
        // Call the onShow handler if it hasn't been called yet
        if (!hasCalledShowHandler.current) {
          hasCalledShowHandler.current = true;
          onShowHandlerStable.current();
        }
        setState(isImmediate ? 'show-immediate' : 'fade-in');
      },
      hide: function hide(_ref4) {
        var isImmediate = _ref4.isImmediate;
        if (isImmediate) {
          setState('hide');
        } else {
          setState('before-fade-out');
        }
      },
      done: done
    };
    var api = (0, _tooltipManager.show)(entry);
    start(api);
  }, [canAppearStable, delayStable, done, start, abort, onShowHandlerStable]);
  var hideTooltipOnEsc = (0, _react.useCallback)(function () {
    var _apiRef$current2;
    (_apiRef$current2 = apiRef.current) === null || _apiRef$current2 === void 0 || _apiRef$current2.requestHide({
      isImmediate: true
    });
  }, [apiRef]);
  (0, _useCloseOnEscapePress.default)({
    onClose: hideTooltipOnEsc,
    isDisabled: state === 'hide' || state === 'fade-out'
  });
  (0, _react.useEffect)(function () {
    if (state === 'hide') {
      return _noop.default;
    }
    if (state === 'before-fade-out') {
      setState('fade-out');
    }
    var unbind = (0, _bindEventListener.bind)(window, {
      type: 'scroll',
      listener: function listener() {
        if (apiRef.current) {
          apiRef.current.requestHide({
            isImmediate: true
          });
        }
      },
      options: {
        capture: true,
        passive: true,
        once: true
      }
    });
    return unbind;
  }, [state]);
  var onMouseDown = (0, _react.useCallback)(function () {
    if (hideTooltipOnMouseDown && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnMouseDown]);
  var onClick = (0, _react.useCallback)(function () {
    if (hideTooltipOnClick && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnClick]);

  // Ideally we would be using onMouseEnter here, but
  // because we are binding the event to the target parent
  // we need to listen for the mouseover of all sub elements
  // This means when moving along a tooltip we are quickly toggling
  // between api.requestHide and api.keep. This it not ideal
  var onMouseOver = (0, _react.useCallback)(function (event) {
    // Ignoring events from the container ref
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }

    // Using prevent default as a signal that parent tooltips
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    var source = position === 'mouse' ? {
      type: 'mouse',
      // TODO: ideally not recalculating this object each time
      mouse: (0, _utilities.getMousePosition)({
        left: event.clientX,
        top: event.clientY
      })
    } : {
      type: 'keyboard'
    };
    tryShowTooltip(source);
  }, [position, tryShowTooltip]);

  // Ideally we would be using onMouseEnter here, but
  // because we are binding the event to the target parent
  // we need to listen for the mouseout of all sub elements
  // This means when moving along a tooltip we are quickly toggling
  // between api.requestHide and api.keep. This it not ideal
  var onMouseOut = (0, _react.useCallback)(function (event) {
    // Ignoring events from the container ref
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }

    // Using prevent default as a signal that parent tooltips
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onMouseMove = position === 'mouse' ? function (event) {
    var _apiRef$current3;
    if ((_apiRef$current3 = apiRef.current) !== null && _apiRef$current3 !== void 0 && _apiRef$current3.isActive()) {
      apiRef.current.mousePosition = (0, _utilities.getMousePosition)({
        left: event.clientX,
        top: event.clientY
      });
    }
  } : undefined;
  var onMouseOverTooltip = (0, _react.useCallback)(function () {
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
  }, []);
  var onFocus = (0, _react.useCallback)(function (e) {
    // Check if focus-visible
    // Prevents tooltips from showing when focus is not visible,
    // i.e., when focus is moved onto tooltip trigger inside a popup on open
    try {
      if (!e.target.matches(':focus-visible') && (0, _platformFeatureFlags.fg)('platform-tooltip-focus-visible-new')) {
        return;
      }
    } catch (_) {
      // Ignore errors from environments that don't support :focus-visible
    }

    // TODO: this does not play well with `hideTooltipOnMouseDown`
    // as "focus" will occur after the "mousedown".
    tryShowTooltip({
      type: 'keyboard'
    });
  }, [tryShowTooltip]);
  var onBlur = (0, _react.useCallback)(function () {
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onAnimationFinished = (0, _react.useCallback)(function (transition) {
    // Using lastState here because motion is not picking up the latest value
    if (transition === 'exiting' && stableState.current === 'fade-out' && apiRef.current) {
      // @ts-ignore: refs are writeable
      apiRef.current.finishHideAnimation();
    }
  }, [stableState]);

  // Doing a cast because typescript is struggling to narrow the type
  var CastTargetContainer = TargetContainer;
  var shouldRenderTooltipPopup = state !== 'hide' && Boolean(content);
  var shouldRenderHiddenContent = !isScreenReaderAnnouncementDisabled && shouldRenderTooltipPopup;
  var shouldRenderTooltipChildren = state !== 'hide' && state !== 'fade-out';
  var handleOpenLayerObserverCloseSignal = (0, _react.useCallback)(function () {
    var _apiRef$current4;
    (_apiRef$current4 = apiRef.current) === null || _apiRef$current4 === void 0 || _apiRef$current4.requestHide({
      isImmediate: true
    });
  }, []);
  (0, _openLayerObserver.useNotifyOpenLayerObserver)({
    // Layer is only visually open if both the tooltip popup (container) and children are rendered.
    isOpen: shouldRenderTooltipPopup && shouldRenderTooltipChildren,
    /**
     * We don't strictly need to provide an onClose callback at this time, as there is
     * already code that handles hiding the tooltip when a drag is started (and the only
     * usage right now is closing all layers when the user resizes the side nav).
     *
     * However, for future-proofing and semantic reasons, it makes sense to close the tooltip
     * whenever the open layer observer requests a close.
     */
    onClose: handleOpenLayerObserverCloseSignal
  });
  var getReferenceElement = function getReferenceElement() {
    var _apiRef$current5;
    if (position === 'mouse' && (_apiRef$current5 = apiRef.current) !== null && _apiRef$current5 !== void 0 && _apiRef$current5.mousePosition) {
      var _apiRef$current6;
      return (_apiRef$current6 = apiRef.current) === null || _apiRef$current6 === void 0 ? void 0 : _apiRef$current6.mousePosition;
    }
    return targetRef.current || undefined;
  };
  var tooltipIdForHiddenContent = (0, _useUniqueId.default)('tooltip', shouldRenderHiddenContent);
  var tooltipTriggerProps = {
    onMouseOver: onMouseOver,
    onMouseOut: onMouseOut,
    onMouseMove: onMouseMove,
    onMouseDown: onMouseDown,
    onClick: onClick,
    onFocus: onFocus,
    onBlur: onBlur
  };

  // Don't set `data-testid` unless it's defined, as it's not in the interface.
  if (testId) {
    // @ts-expect-error - Adding `data-testid` to the TriggerProps interface breaks Buttons.
    tooltipTriggerProps['data-testid'] = "".concat(testId, "--container");
  }

  // This useEffect is purely for managing the aria attribute when using the
  // wrapped children approach.
  var isChildrenAFunction = typeof children === 'function';
  (0, _react.useEffect)(function () {
    if (isChildrenAFunction) {
      return;
    }

    // If `children` is _not_ a function, we are stepping outside of the public
    // API to add a `aria-describedby` attribute.

    var target = targetRef.current;
    if (!target || !tooltipIdForHiddenContent) {
      return;
    }
    target.setAttribute('aria-describedby', tooltipIdForHiddenContent);
    return function () {
      return target.removeAttribute('aria-describedby');
    };
  }, [isChildrenAFunction, tooltipIdForHiddenContent]);
  var hiddenContent = shouldRenderHiddenContent ? /*#__PURE__*/_react.default.createElement("span", {
    "data-testid": testId ? "".concat(testId, "-hidden") : undefined,
    hidden: true,
    id: tooltipIdForHiddenContent
  }, typeof content === 'function' ? content({}) : content) : null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, typeof children === 'function' ?
  /*#__PURE__*/
  // once we deprecate the wrapped approach, we can put the aria
  // attribute back into the tooltipTriggerProps and make it required
  // instead of optional in `types`
  _react.default.createElement(_react.default.Fragment, null, children(_objectSpread(_objectSpread({}, tooltipTriggerProps), {}, {
    'aria-describedby': tooltipIdForHiddenContent,
    ref: setDirectRef
  })), hiddenContent) : /*#__PURE__*/_react.default.createElement(CastTargetContainer, (0, _extends2.default)({}, tooltipTriggerProps, {
    ref: setImplicitRefFromChildren
    /**
     * TODO: Why is role="presentation" added?
     * - Is it only to "remove" the `Container` from screen readers?
     * - Why is it added only to the `Container` but not to `tooltipTriggerProps`?
     * - Should `role="presentation"` only be used if `shouldRenderHiddenContent == false`?
     */,
    role: "presentation"
  }), children, hiddenContent), shouldRenderTooltipPopup ? /*#__PURE__*/_react.default.createElement(_portal.default, {
    zIndex: tooltipZIndex
  }, /*#__PURE__*/_react.default.createElement(_popper.Popper, {
    placement: tooltipPosition,
    referenceElement: getReferenceElement(),
    strategy: strategy
  }, function (_ref5) {
    var ref = _ref5.ref,
      style = _ref5.style,
      update = _ref5.update,
      placement = _ref5.placement;
    // Invert the entrance and exit directions.
    // E.g. a tooltip's position is on the 'right', it should enter from and exit to the 'left'
    // This gives the effect the tooltip is appearing from the target
    var direction = position === 'mouse' ? undefined : invertedDirection[getDirectionFromPlacement(placement)];
    return /*#__PURE__*/_react.default.createElement(_motion.ExitingPersistence, {
      appear: true
    }, shouldRenderTooltipChildren && /*#__PURE__*/_react.default.createElement(_motion.FadeIn, {
      distance: "constant",
      entranceDirection: direction,
      exitDirection: direction,
      onFinish: onAnimationFinished,
      duration: state !== 'show-immediate' ? 'medium' : 'none'
    }, function (_ref6) {
      var className = _ref6.className;
      return /*#__PURE__*/_react.default.createElement(Container, {
        ref: ref
        /**
         * "Tooltip" classname is a hook used by tests to manipulate
         * and hide tooltips, including in VR snapshots
         */
        // eslint-disable-next-line @atlaskit/ui-styling-standard/no-classname-prop -- Ignored via go/DSP-18766
        ,
        className: "Tooltip ".concat(className),
        style: _objectSpread(_objectSpread({}, style), ignoreTooltipPointerEvents && {
          pointerEvents: 'none'
        }),
        truncate: truncate,
        placement: tooltipPosition,
        testId: getReferenceElement() ? testId : testId && "".concat(testId, "--unresolved"),
        onMouseOut: onMouseOut,
        onMouseOver: onMouseOverTooltip
      }, typeof content === 'function' ? content({
        update: update
      }) : content);
    }));
  })) : null);
}
var _default = exports.default = Tooltip;