"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InternalPortalNew;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactDom = require("react-dom");
var _useIsomorphicLayoutEffect = require("../hooks/use-isomorphic-layout-effect");
var _portalDomUtils = require("../utils/portal-dom-utils");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function InternalPortalNew(props) {
  var zIndex = props.zIndex,
    children = props.children;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    atlaskitPortal = _useState2[0],
    setAtlaskitPortal = _useState2[1];
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var tempPortalContainer = (0, _portalDomUtils.createAtlaskitPortal)(zIndex);
    setAtlaskitPortal(tempPortalContainer);
    var portalParent = (0, _portalDomUtils.createPortalParent)();
    if (!tempPortalContainer || !portalParent) {
      return;
    }
    portalParent.appendChild(tempPortalContainer);
    return function () {
      if (tempPortalContainer) {
        portalParent.removeChild(tempPortalContainer);
      }
      setAtlaskitPortal(null);
    };
  }, [zIndex]);

  /**
   * We wrap portal children with a Suspense boundary because in React 18 concurrent,
   * if you suspend from _within_ a portal to a Suspense boundary _outside_ the portal,
   * our portal gets in an infinite loop of rendering.
   */
  var suspendedChildren = /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: null
  }, children);
  return atlaskitPortal ? /*#__PURE__*/(0, _reactDom.createPortal)(suspendedChildren, atlaskitPortal) : null;
}