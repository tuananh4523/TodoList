/* link.tsx generated by @compiled/babel-plugin v0.36.1 */
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["analyticsContext", "appearance", "aria-label", "aria-labelledby", "autoFocus", "children", "href", "iconAfter", "iconBefore", "interactionName", "isDisabled", "isSelected", "onClick", "onClickCapture", "onKeyDownCapture", "onKeyUpCapture", "onMouseDownCapture", "onMouseUpCapture", "onPointerDownCapture", "onPointerUpCapture", "onTouchEndCapture", "onTouchStartCapture", "shouldFitContainer", "spacing", "testId"],
  _excluded2 = ["className", "css", "as", "style"];
import "./link.compiled.css";
import * as React from 'react';
import { ax, ix } from "@compiled/react/runtime";
import { forwardRef, useRef } from 'react';
import { cx } from '@atlaskit/css';
import mergeRefs from '@atlaskit/ds-lib/merge-refs';
import useAutoFocus from '@atlaskit/ds-lib/use-auto-focus';
import { fg } from '@atlaskit/platform-feature-flags';
import { Anchor } from '@atlaskit/primitives/compiled';
import Content from '../shared/content';
import IconRenderer from '../shared/icon-renderer';
var styles = {
  base: "_2rkosqtm _11c82smr _v5649dqc _189eidpf _1rjc12x7 _1e0c116y _vchhusvi _1bsb1wug _p12f1osq _kqswh2mm _4cvr1q9y _1bah1h6o _gy1p1b66 _1o9zidpf _4t3iviql _k48p1wq8 _y4tiutpp _bozgutpp _y3gn1h6o _s7n4nkob _14mj1kw7 _9v7aze3t _1tv3nqa1 _39yqe4h9 _11fnglyw _18postnw",
  linkDecorationUnset: "_4bfu1snc _1hmsagmp _ajmmvv82 _1a3b1r31 _4fprglyw _5goinqa1 _9oik1r31 _1bnxglyw _jf4cnqa1 _1nrm1r31 _c2waglyw _1iohnqa1",
  disabled: "_80om13gf _bfhksyzs _syaz1lh4 _aetrglyw _irr3syzs _30l31lh4 _1di6syzs _9h8h1lh4",
  spacingCompact: "_1rjcv77o _gy1p1b66 _4t3i1k8s _y4tiutpp _bozgutpp _s7n4nkob",
  buttonIconBefore: "_bozgu2gc",
  buttonIconAfter: "_y4tiu2gc",
  fullWidth: "_1bsb1osq"
};
var defaultStyles = {
  root: "_bfhk1j54 _syaz10s3 _105310s3 _f8pj10s3 _irr3yw9d _30l310s3 _1di6ip91 _9h8h10s3",
  rootRefreshed: "_bfhksm61 _syaz1gjq _8l3mmuej _aetrb3bt _10531gjq _f8pj1gjq _irr3166n _30l31gjq _1di61dty _9h8h1gjq"
};
var primaryStyles = {
  root: "_bfhkomb0 _syaz15cr _105315cr _f8pj15cr _30l315cr _irr31wqm _9h8h15cr _1di617hq"
};
var warningStyles = {
  root: "_bfhk1ikc _syazal3n _1053al3n _f8pjal3n _30l3al3n _irr31j43 _9h8hal3n _1di6h4op"
};
var dangerStyles = {
  root: "_bfhk1v7l _syaz15cr _105315cr _f8pj15cr _30l315cr _irr31rwk _9h8h15cr _1di6yycf"
};
var discoveryStyles = {
  root: "_bfhk1vbi _syaz15cr _105315cr _f8pj15cr _30l315cr _irr37gr8 _9h8h15cr _1di61wu2"
};
var subtleStyles = {
  root: "_bfhkqtfy _syaz10s3 _105310s3 _f8pj10s3 _irr34mfv _30l310s3 _1di619qy _9h8h10s3",
  rootRefreshed: "_bfhkqtfy _syaz1gjq _10531gjq _f8pj1mjl _irr34mfv _30l31gjq _1di619qy _9h8h1gjq"
};
var selectedStyles = {
  root: "_bfhk7btw _syaz1pke _10531pke _f8pj1pke _irr3i1yw _30l31pke _1di619ru _9h8h1pke",
  rootRefreshed: "_bfhkfg4m _syaz1ldt _8l3mcoux _aetrb3bt _10531ldt _f8pj1ldt _30l31ldt _9h8h1ldt",
  warning: "_bfhkvdtc _syaz16q2 _30l31pke _irr3vdtc _9h8h1pke _1di6vdtc",
  danger: "_bfhkbeib _syaz1pke _30l31pke _irr3beib _9h8h1pke _1di6beib",
  discovery: "_bfhk1g49 _syaz1pke _30l31pke _irr31g49 _9h8h1pke _1di61g49"
};

/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/link-button/examples)
 * - [Code](https://atlassian.design/components/link-button/code)
 * - [Usage](https://atlassian.design/components/link-button/usage)
 */
var LinkButtonBase = function LinkButtonBase(_ref, ref) {
  var analyticsContext = _ref.analyticsContext,
    _ref$appearance = _ref.appearance,
    appearance = _ref$appearance === void 0 ? 'default' : _ref$appearance,
    ariaLabel = _ref['aria-label'],
    ariaLabelledBy = _ref['aria-labelledby'],
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    children = _ref.children,
    href = _ref.href,
    iconAfter = _ref.iconAfter,
    iconBefore = _ref.iconBefore,
    interactionName = _ref.interactionName,
    isDisabled = _ref.isDisabled,
    isSelected = _ref.isSelected,
    onClick = _ref.onClick,
    onClickCapture = _ref.onClickCapture,
    onKeyDownCapture = _ref.onKeyDownCapture,
    onKeyUpCapture = _ref.onKeyUpCapture,
    onMouseDownCapture = _ref.onMouseDownCapture,
    onMouseUpCapture = _ref.onMouseUpCapture,
    onPointerDownCapture = _ref.onPointerDownCapture,
    onPointerUpCapture = _ref.onPointerUpCapture,
    onTouchEndCapture = _ref.onTouchEndCapture,
    onTouchStartCapture = _ref.onTouchStartCapture,
    shouldFitContainer = _ref.shouldFitContainer,
    spacing = _ref.spacing,
    testId = _ref.testId,
    unsafeRest = _objectWithoutProperties(_ref, _excluded);
  // @ts-expect-error
  var _className = unsafeRest.className,
    _css = unsafeRest.css,
    _as = unsafeRest.as,
    _style = unsafeRest.style,
    saferRest = _objectWithoutProperties(unsafeRest, _excluded2);
  var hasIconAfter = Boolean(iconAfter);
  var hasIconBefore = Boolean(iconBefore);
  var localRef = useRef(null);
  useAutoFocus(localRef, autoFocus);
  var combinedRef = mergeRefs([localRef, ref]);
  return /*#__PURE__*/React.createElement(Anchor, _extends({
    analyticsContext: analyticsContext,
    ref: combinedRef
    /**
     * Disable link in an accessible way using `href`, `role`, and `aria-disabled`.
     * @see https://a11y-guidelines.orange.com/en/articles/disable-elements/#disable-a-link
     */
    // @ts-expect-error (`href` is required, we could make it optional but don't want to encourage this pattern elsewhere)
    ,
    href: isDisabled ? undefined : href,
    role: isDisabled ? 'link' : undefined,
    "aria-disabled": isDisabled === true ? true : undefined,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    onClick: onClick,
    onClickCapture: onClickCapture,
    onKeyDownCapture: onKeyDownCapture,
    onKeyUpCapture: onKeyUpCapture,
    onMouseDownCapture: onMouseDownCapture,
    onMouseUpCapture: onMouseUpCapture,
    onPointerDownCapture: onPointerDownCapture,
    onPointerUpCapture: onPointerUpCapture,
    onTouchEndCapture: onTouchEndCapture,
    onTouchStartCapture: onTouchStartCapture,
    testId: testId,
    componentName: "LinkButton",
    interactionName: interactionName
    // eslint-disable-next-line @repo/internal/react/no-unsafe-spread-props
  }, saferRest, {
    xcss: cx(styles.base, appearance === 'default' && (fg('platform-component-visual-refresh') ? defaultStyles.rootRefreshed : defaultStyles.root), appearance === 'primary' && primaryStyles.root, appearance === 'warning' && warningStyles.root, appearance === 'danger' && dangerStyles.root, appearance === 'discovery' && discoveryStyles.root, appearance === 'subtle' && (fg('platform-component-visual-refresh') ? subtleStyles.rootRefreshed : subtleStyles.root), styles.linkDecorationUnset, isSelected && (fg('platform-component-visual-refresh') ? selectedStyles.rootRefreshed : selectedStyles.root),
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'danger' && selectedStyles.danger,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'warning' && selectedStyles.warning,
    // TODO: remove me once we kill color fallbacks
    isSelected && appearance === 'discovery' && selectedStyles.discovery, isDisabled && styles.disabled, spacing === 'compact' && styles.spacingCompact, hasIconBefore && styles.buttonIconBefore, hasIconAfter && styles.buttonIconAfter, shouldFitContainer && styles.fullWidth)
  }), iconBefore && /*#__PURE__*/React.createElement(Content, {
    type: "icon",
    position: "before",
    isLoading: false
  }, /*#__PURE__*/React.createElement(IconRenderer, {
    icon: iconBefore
  })), children && /*#__PURE__*/React.createElement(Content, {
    isLoading: false
  }, children), iconAfter && /*#__PURE__*/React.createElement(Content, {
    type: "icon",
    position: "after",
    isLoading: false
  }, /*#__PURE__*/React.createElement(IconRenderer, {
    icon: iconAfter
  })));
};

// Workarounds to support generic types with forwardRef
/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/link-button/examples)
 * - [Code](https://atlassian.design/components/link-button/code)
 * - [Usage](https://atlassian.design/components/link-button/usage)
 */
var LinkButton = /*#__PURE__*/forwardRef(LinkButtonBase);
LinkButton.displayName = 'LinkButton';
export default LinkButton;