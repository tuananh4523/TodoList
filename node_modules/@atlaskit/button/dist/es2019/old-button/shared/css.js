// eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
import { css } from '@emotion/react';
import { fg } from '@atlaskit/platform-feature-flags';
import {
// eslint-disable-next-line @atlaskit/design-system/no-deprecated-imports
gridSize as getGridSize } from '@atlaskit/theme/constants';
import colors from './colors';
const gridSize = getGridSize();
const HAS_DISABLED_BACKGROUND = ['default', 'primary', 'danger', 'warning'];

// ## Button layout
//
// /------------------------------------------------------------------------------------------------------------------\
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// |  10px →  |  ← 2px  |   icon   |  2px →  |  ← 2px  |           |  2px →  |  ← 2px  |  icon   |  2px →  |  ← 10px  |
// |  padding |  margin |  before  |  margin |  margin |  content  |  margin |  margin |  after  |  margin |  padding |
// |    (12px total)    |          |    (4px total)    |           |    (4px total)    |         |    (12px total)    |
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// \------------------------------------------------------------------------------------------------------------------/
//                                           ↑                               ↑
//                                        Margins don't collapse with inline-flex
//
const heights = {
  default: `${32 / 14}em`,
  // 32px
  compact: `${24 / 14}em`,
  none: 'auto'
};
const lineHeights = {
  default: heights.default,
  compact: heights.compact,
  none: 'inherit'
};
const padding = {
  // 10px gutter
  default: `0 ${gridSize + gridSize / 4}px`,
  compact: `0 ${gridSize + gridSize / 4}px`,
  none: '0'
};
const singleIconPadding = {
  // 2px gutter
  compact: `0 ${gridSize / 4}px`,
  default: `0 ${gridSize / 4}px`,
  none: '0'
};
const verticalAlign = {
  default: 'middle',
  compact: 'middle',
  none: 'baseline'
};
const innerMargin = {
  content: `0 ${gridSize / 4}px`,
  icon: `0 ${gridSize / 4}px`
};
const defaultAfterStyles = {
  borderRadius: 'inherit',
  inset: "var(--ds-space-0, 0px)",
  borderStyle: 'solid',
  borderWidth: "var(--ds-border-width, 1px)",
  pointerEvents: 'none',
  position: 'absolute'
};
const defaultStyles = {
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: "var(--ds-text, #172B4D)",
  '&::after': {
    ...defaultAfterStyles,
    content: '""',
    borderColor: "var(--ds-border, #091E4224)"
  },
  '&:hover': {
    background: "var(--ds-background-neutral-hovered, #091E4224)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-pressed, #091E424F)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]:hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]:active': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
const primaryStyles = {
  background: "var(--ds-background-brand-bold, #0C66E4)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-brand-bold-hovered, #0055CC)"
  },
  '&:active': {
    background: "var(--ds-background-brand-bold-pressed, #09326C)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-brand-bold, #0C66E4)"
  }
};
const linkStyles = {
  background: 'transparent',
  color: "var(--ds-link, #0C66E4)",
  '&:hover': {
    color: "var(--ds-link, #0C66E4)",
    textDecoration: 'underline'
  },
  '&:active': {
    color: "var(--ds-link-pressed, #0055CC)",
    textDecoration: 'underline'
  }
};
const subtleStyles = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: 'transparent'
  }
};
const subtleLinkStyles = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: 'transparent',
    color: "var(--ds-text-subtle, #44546F)",
    textDecoration: 'underline'
  },
  '&:active': {
    background: 'transparent',
    color: "var(--ds-text, #172B4D)",
    textDecoration: 'underline'
  }
};
const warningStyles = {
  background: "var(--ds-background-warning-bold, #F5CD47)",
  color: "var(--ds-text-warning-inverse, #172B4D)",
  '&:hover': {
    background: "var(--ds-background-warning-bold-hovered, #E2B203)"
  },
  '&:active': {
    background: "var(--ds-background-warning-bold-pressed, #CF9F02)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-warning-bold, #F5CD47)"
  }
};
const dangerStyles = {
  background: "var(--ds-background-danger-bold, #C9372C)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-danger-bold-hovered, #AE2E24)"
  },
  '&:active': {
    background: "var(--ds-background-danger-bold-pressed, #5D1F1A)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-danger-bold, #C9372C)"
  }
};
const selectedStyles = {
  background: "var(--ds-background-selected, #E9F2FF)",
  color: "var(--ds-text-selected, #0C66E4)",
  '&:not([disabled])::after': {
    ...defaultAfterStyles,
    content: '""',
    borderColor: "var(--ds-border-selected, #0C66E4)"
  }
};
const hasOverlayStyles = {
  '&[data-has-overlay="true"]': {
    cursor: 'default',
    textDecoration: 'none'
  }
};
function getColor({
  group,
  key,
  mode
}) {
  const rule = group[key] || group.default;
  return rule[mode];
}
function getColors({
  appearance,
  key,
  mode
}) {
  return {
    background: getColor({
      group: colors.background[appearance],
      key,
      mode
    }),
    // Needing to add !important to overcome specificity issue caused by deprecated AtlaskitThemeProvider
    color: `${getColor({
      group: colors.color[appearance],
      key,
      mode
    })} !important`
  };
}
export function getCss({
  appearance,
  spacing,
  mode,
  isSelected,
  shouldFitContainer,
  isOnlySingleIcon
}) {
  const baseColors = getColors({
    appearance,
    key: isSelected ? 'selected' : 'default',
    mode
  });
  return {
    // 0px margin added to css-reset
    alignItems: 'baseline',
    borderWidth: 0,
    borderRadius: "var(--ds-border-radius, 3px)",
    boxSizing: 'border-box',
    display: 'inline-flex',
    fontSize: 'inherit',
    fontStyle: 'normal',
    // Chrome recently changed button so that they use 'arial' as the font family
    fontFamily: 'inherit',
    fontWeight: "var(--ds-font-weight-medium, 500)",
    // margin for button has been applied to css reset
    maxWidth: '100%',
    // Needed to position overlay
    position: 'relative',
    textAlign: 'center',
    textDecoration: 'none',
    transition: 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)',
    whiteSpace: 'nowrap',
    // dynamic styles
    ...(!fg('platform-component-visual-refresh') && baseColors),
    cursor: 'pointer',
    height: heights[spacing],
    lineHeight: lineHeights[spacing],
    padding: isOnlySingleIcon ? singleIconPadding[spacing] : padding[spacing],
    verticalAlign: verticalAlign[spacing],
    width: shouldFitContainer ? '100%' : 'auto',
    // justifyContent required for shouldFitContainer buttons with an icon inside
    justifyContent: 'center',
    // Note: we cannot disable pointer events when there is an overlay.
    // That would be easy for styling, but it would start letting events through on disabled buttons

    ...(!fg('platform-component-visual-refresh') && {
      // Disabling visited styles (just using the base colors)
      '&:visited': {
        ...baseColors
      },
      '&:hover': {
        ...getColors({
          appearance,
          key: isSelected ? 'selected' : 'hover',
          mode
        }),
        textDecoration: !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? 'underline' : 'inherit',
        // background, box-shadow
        transitionDuration: '0s, 0.15s'
      },
      // giving active styles preference by listing them after focus
      '&:active': {
        ...getColors({
          appearance,
          key: isSelected ? 'selected' : 'active',
          mode
        }),
        // background, box-shadow
        transitionDuration: '0s, 0s'
      },
      // preventDefault prevents regular active styles from applying in Firefox
      '&[data-firefox-is-active="true"]': {
        ...getColors({
          appearance,
          key: isSelected ? 'selected' : 'active',
          mode
        }),
        // background, box-shadow
        transitionDuration: '0s, 0s'
      },
      // Giving disabled styles preference over active by listing them after.
      // Not using '&:disabled' because :disabled is not a valid state for all element types
      // so we are targeting the attribute
      // Attributes have the same specificity a pseudo classes so we are overriding :disabled here
      '&[disabled]': {
        // always using 'disabled' even when selected
        ...getColors({
          appearance,
          key: 'disabled',
          mode
        }),
        cursor: 'not-allowed',
        textDecoration: 'none'
      },
      ...hasOverlayStyles,
      // disabling hover and active color changes when there is an overlay, but the button is not disabled
      '&[data-has-overlay="true"]:not([disabled]):hover, &[data-has-overlay="true"]:not([disabled]):active': {
        ...getColors({
          appearance,
          key: isSelected ? 'selected' : 'default',
          mode
        })
      }
    }),
    // dynamic colours for visual refresh:
    ...(fg('platform-component-visual-refresh') && (isSelected ? selectedStyles : {
      ...(appearance === 'default' && defaultStyles),
      ...(appearance === 'primary' && primaryStyles),
      ...(appearance === 'link' && linkStyles),
      ...(appearance === 'subtle' && subtleStyles),
      ...(appearance === 'subtle-link' && subtleLinkStyles),
      ...(appearance === 'warning' && warningStyles),
      ...(appearance === 'danger' && dangerStyles),
      '&[disabled]': {
        color: "var(--ds-text-disabled, #091E424F)",
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent',
        cursor: 'not-allowed',
        textDecoration: 'none',
        '&:hovered': {
          backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
        },
        '&:active': {
          backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
        }
      },
      ...hasOverlayStyles
    })),
    '&::-moz-focus-inner': {
      border: 0,
      margin: 0,
      padding: 0
    }
  };
}

// inline-flex child
export function getIconStyle({
  spacing
}) {
  return css({
    display: 'flex',
    // icon size cannot grow and shrink
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.icon,
    flexGrow: 0,
    flexShrink: 0,
    alignSelf: 'center',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    fontSize: 0,
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: 0,
    userSelect: 'none'
  });
}

// inline-flex child
export function getContentStyle({
  spacing
}) {
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.content,
    // content can grow and shrink
    flexGrow: 1,
    flexShrink: 1,
    // ellipsis for overflow text
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  });
}
export function getFadingCss({
  hasOverlay
}) {
  return css({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: hasOverlay ? 0 : 1,
    transition: 'opacity 0.3s'
  });
}
export const overlayCss = {
  // stretching to full width / height of button
  // this is important as we need it to still block
  // event if clicking in the button's own padding
  position: 'absolute',
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  // Putting all children in the center
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};