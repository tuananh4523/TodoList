"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContentStyle = getContentStyle;
exports.getCss = getCss;
exports.getFadingCss = getFadingCss;
exports.getIconStyle = getIconStyle;
exports.overlayCss = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("@emotion/react");
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var _constants = require("@atlaskit/theme/constants");
var _colors = _interopRequireDefault(require("./colors"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; } // eslint-disable-next-line @atlaskit/ui-styling-standard/use-compiled -- Ignored via go/DSP-18766
var gridSize = (0, _constants.gridSize)();
var HAS_DISABLED_BACKGROUND = ['default', 'primary', 'danger', 'warning'];

// ## Button layout
//
// /------------------------------------------------------------------------------------------------------------------\
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// |  10px →  |  ← 2px  |   icon   |  2px →  |  ← 2px  |           |  2px →  |  ← 2px  |  icon   |  2px →  |  ← 10px  |
// |  padding |  margin |  before  |  margin |  margin |  content  |  margin |  margin |  after  |  margin |  padding |
// |    (12px total)    |          |    (4px total)    |           |    (4px total)    |         |    (12px total)    |
// |       →  |  ←      |          |      →  |  ←      |           |      →  |  ←      |         |      →  |  ←       |
// \------------------------------------------------------------------------------------------------------------------/
//                                           ↑                               ↑
//                                        Margins don't collapse with inline-flex
//
var heights = {
  default: "".concat(32 / 14, "em"),
  // 32px
  compact: "".concat(24 / 14, "em"),
  none: 'auto'
};
var lineHeights = {
  default: heights.default,
  compact: heights.compact,
  none: 'inherit'
};
var padding = {
  // 10px gutter
  default: "0 ".concat(gridSize + gridSize / 4, "px"),
  compact: "0 ".concat(gridSize + gridSize / 4, "px"),
  none: '0'
};
var singleIconPadding = {
  // 2px gutter
  compact: "0 ".concat(gridSize / 4, "px"),
  default: "0 ".concat(gridSize / 4, "px"),
  none: '0'
};
var verticalAlign = {
  default: 'middle',
  compact: 'middle',
  none: 'baseline'
};
var innerMargin = {
  content: "0 ".concat(gridSize / 4, "px"),
  icon: "0 ".concat(gridSize / 4, "px")
};
var defaultAfterStyles = {
  borderRadius: 'inherit',
  inset: "var(--ds-space-0, 0px)",
  borderStyle: 'solid',
  borderWidth: "var(--ds-border-width, 1px)",
  pointerEvents: 'none',
  position: 'absolute'
};
var defaultStyles = {
  background: "var(--ds-background-neutral-subtle, #00000000)",
  color: "var(--ds-text, #172B4D)",
  '&::after': _objectSpread(_objectSpread({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border, #091E4224)"
  }),
  '&:hover': {
    background: "var(--ds-background-neutral-hovered, #091E4224)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-pressed, #091E424F)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]:hover': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  },
  '&:disabled[disabled]:active': {
    background: "var(--ds-background-neutral-subtle, #00000000)"
  }
};
var primaryStyles = {
  background: "var(--ds-background-brand-bold, #0C66E4)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-brand-bold-hovered, #0055CC)"
  },
  '&:active': {
    background: "var(--ds-background-brand-bold-pressed, #09326C)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-brand-bold, #0C66E4)"
  }
};
var linkStyles = {
  background: 'transparent',
  color: "var(--ds-link, #0C66E4)",
  '&:hover': {
    color: "var(--ds-link, #0C66E4)",
    textDecoration: 'underline'
  },
  '&:active': {
    color: "var(--ds-link-pressed, #0055CC)",
    textDecoration: 'underline'
  }
};
var subtleStyles = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: "var(--ds-background-neutral-subtle-hovered, #091E420F)"
  },
  '&:active': {
    background: "var(--ds-background-neutral-subtle-pressed, #091E4224)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: 'transparent'
  }
};
var subtleLinkStyles = {
  background: 'transparent',
  color: "var(--ds-text-subtle, #44546F)",
  '&:hover': {
    background: 'transparent',
    color: "var(--ds-text-subtle, #44546F)",
    textDecoration: 'underline'
  },
  '&:active': {
    background: 'transparent',
    color: "var(--ds-text, #172B4D)",
    textDecoration: 'underline'
  }
};
var warningStyles = {
  background: "var(--ds-background-warning-bold, #F5CD47)",
  color: "var(--ds-text-warning-inverse, #172B4D)",
  '&:hover': {
    background: "var(--ds-background-warning-bold-hovered, #E2B203)"
  },
  '&:active': {
    background: "var(--ds-background-warning-bold-pressed, #CF9F02)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-warning-bold, #F5CD47)"
  }
};
var dangerStyles = {
  background: "var(--ds-background-danger-bold, #C9372C)",
  color: "var(--ds-text-inverse, #FFFFFF)",
  '&:hover': {
    background: "var(--ds-background-danger-bold-hovered, #AE2E24)"
  },
  '&:active': {
    background: "var(--ds-background-danger-bold-pressed, #5D1F1A)"
  },
  '&[data-has-overlay="true"]:not([disabled]):hover': {
    background: "var(--ds-background-danger-bold, #C9372C)"
  }
};
var selectedStyles = {
  background: "var(--ds-background-selected, #E9F2FF)",
  color: "var(--ds-text-selected, #0C66E4)",
  '&:not([disabled])::after': _objectSpread(_objectSpread({}, defaultAfterStyles), {}, {
    content: '""',
    borderColor: "var(--ds-border-selected, #0C66E4)"
  })
};
var hasOverlayStyles = {
  '&[data-has-overlay="true"]': {
    cursor: 'default',
    textDecoration: 'none'
  }
};
function getColor(_ref) {
  var group = _ref.group,
    key = _ref.key,
    mode = _ref.mode;
  var rule = group[key] || group.default;
  return rule[mode];
}
function getColors(_ref2) {
  var appearance = _ref2.appearance,
    key = _ref2.key,
    mode = _ref2.mode;
  return {
    background: getColor({
      group: _colors.default.background[appearance],
      key: key,
      mode: mode
    }),
    // Needing to add !important to overcome specificity issue caused by deprecated AtlaskitThemeProvider
    color: "".concat(getColor({
      group: _colors.default.color[appearance],
      key: key,
      mode: mode
    }), " !important")
  };
}
function getCss(_ref3) {
  var appearance = _ref3.appearance,
    spacing = _ref3.spacing,
    mode = _ref3.mode,
    isSelected = _ref3.isSelected,
    shouldFitContainer = _ref3.shouldFitContainer,
    isOnlySingleIcon = _ref3.isOnlySingleIcon;
  var baseColors = getColors({
    appearance: appearance,
    key: isSelected ? 'selected' : 'default',
    mode: mode
  });
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    // 0px margin added to css-reset
    alignItems: 'baseline',
    borderWidth: 0,
    borderRadius: "var(--ds-border-radius, 3px)",
    boxSizing: 'border-box',
    display: 'inline-flex',
    fontSize: 'inherit',
    fontStyle: 'normal',
    // Chrome recently changed button so that they use 'arial' as the font family
    fontFamily: 'inherit',
    fontWeight: "var(--ds-font-weight-medium, 500)",
    // margin for button has been applied to css reset
    maxWidth: '100%',
    // Needed to position overlay
    position: 'relative',
    textAlign: 'center',
    textDecoration: 'none',
    transition: 'background 0.1s ease-out, box-shadow 0.15s cubic-bezier(0.47, 0.03, 0.49, 1.38)',
    whiteSpace: 'nowrap'
  }, !(0, _platformFeatureFlags.fg)('platform-component-visual-refresh') && baseColors), {}, {
    cursor: 'pointer',
    height: heights[spacing],
    lineHeight: lineHeights[spacing],
    padding: isOnlySingleIcon ? singleIconPadding[spacing] : padding[spacing],
    verticalAlign: verticalAlign[spacing],
    width: shouldFitContainer ? '100%' : 'auto',
    // justifyContent required for shouldFitContainer buttons with an icon inside
    justifyContent: 'center'
  }, !(0, _platformFeatureFlags.fg)('platform-component-visual-refresh') && _objectSpread(_objectSpread({
    // Disabling visited styles (just using the base colors)
    '&:visited': _objectSpread({}, baseColors),
    '&:hover': _objectSpread(_objectSpread({}, getColors({
      appearance: appearance,
      key: isSelected ? 'selected' : 'hover',
      mode: mode
    })), {}, {
      textDecoration: !isSelected && (appearance === 'link' || appearance === 'subtle-link') ? 'underline' : 'inherit',
      // background, box-shadow
      transitionDuration: '0s, 0.15s'
    }),
    // giving active styles preference by listing them after focus
    '&:active': _objectSpread(_objectSpread({}, getColors({
      appearance: appearance,
      key: isSelected ? 'selected' : 'active',
      mode: mode
    })), {}, {
      // background, box-shadow
      transitionDuration: '0s, 0s'
    }),
    // preventDefault prevents regular active styles from applying in Firefox
    '&[data-firefox-is-active="true"]': _objectSpread(_objectSpread({}, getColors({
      appearance: appearance,
      key: isSelected ? 'selected' : 'active',
      mode: mode
    })), {}, {
      // background, box-shadow
      transitionDuration: '0s, 0s'
    }),
    // Giving disabled styles preference over active by listing them after.
    // Not using '&:disabled' because :disabled is not a valid state for all element types
    // so we are targeting the attribute
    // Attributes have the same specificity a pseudo classes so we are overriding :disabled here
    '&[disabled]': _objectSpread(_objectSpread({}, getColors({
      appearance: appearance,
      key: 'disabled',
      mode: mode
    })), {}, {
      cursor: 'not-allowed',
      textDecoration: 'none'
    })
  }, hasOverlayStyles), {}, {
    // disabling hover and active color changes when there is an overlay, but the button is not disabled
    '&[data-has-overlay="true"]:not([disabled]):hover, &[data-has-overlay="true"]:not([disabled]):active': _objectSpread({}, getColors({
      appearance: appearance,
      key: isSelected ? 'selected' : 'default',
      mode: mode
    }))
  })), (0, _platformFeatureFlags.fg)('platform-component-visual-refresh') && (isSelected ? selectedStyles : _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, appearance === 'default' && defaultStyles), appearance === 'primary' && primaryStyles), appearance === 'link' && linkStyles), appearance === 'subtle' && subtleStyles), appearance === 'subtle-link' && subtleLinkStyles), appearance === 'warning' && warningStyles), appearance === 'danger' && dangerStyles), {}, {
    '&[disabled]': {
      color: "var(--ds-text-disabled, #091E424F)",
      backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent',
      cursor: 'not-allowed',
      textDecoration: 'none',
      '&:hovered': {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
      },
      '&:active': {
        backgroundColor: HAS_DISABLED_BACKGROUND.includes(appearance) ? "var(--ds-background-disabled, #091E4208)" : 'transparent'
      }
    }
  }, hasOverlayStyles))), {}, {
    '&::-moz-focus-inner': {
      border: 0,
      margin: 0,
      padding: 0
    }
  });
}

// inline-flex child
function getIconStyle(_ref4) {
  var spacing = _ref4.spacing;
  return (0, _react.css)({
    display: 'flex',
    // icon size cannot grow and shrink
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.icon,
    flexGrow: 0,
    flexShrink: 0,
    alignSelf: 'center',
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    fontSize: 0,
    // eslint-disable-next-line @atlaskit/design-system/use-tokens-typography
    lineHeight: 0,
    userSelect: 'none'
  });
}

// inline-flex child
function getContentStyle(_ref5) {
  var spacing = _ref5.spacing;
  return (0, _react.css)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    margin: spacing === 'none' ? 0 : innerMargin.content,
    // content can grow and shrink
    flexGrow: 1,
    flexShrink: 1,
    // ellipsis for overflow text
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  });
}
function getFadingCss(_ref6) {
  var hasOverlay = _ref6.hasOverlay;
  return (0, _react.css)({
    // eslint-disable-next-line @atlaskit/ui-styling-standard/no-unsafe-values -- Ignored via go/DSP-18766
    opacity: hasOverlay ? 0 : 1,
    transition: 'opacity 0.3s'
  });
}
var overlayCss = exports.overlayCss = {
  // stretching to full width / height of button
  // this is important as we need it to still block
  // event if clicking in the button's own padding
  position: 'absolute',
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  // Putting all children in the center
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center'
};