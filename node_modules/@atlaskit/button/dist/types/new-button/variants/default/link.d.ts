import type { AdditionalDefaultLinkVariantProps, CommonLinkVariantProps } from '../types';
import type { CommonDefaultButtonProps } from './types';
export type LinkButtonProps<RouterLinkConfig extends Record<string, any> = never> = CommonDefaultButtonProps & CommonLinkVariantProps<RouterLinkConfig> & AdditionalDefaultLinkVariantProps;
/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/link-button/examples)
 * - [Code](https://atlassian.design/components/link-button/code)
 * - [Usage](https://atlassian.design/components/link-button/usage)
 */
declare const LinkButtonBase: <RouterLinkConfig extends Record<string, any> = never>({ analyticsContext, appearance, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, autoFocus, children, href, iconAfter, iconBefore, interactionName, isDisabled, isSelected, onClick, onClickCapture, onKeyDownCapture, onKeyUpCapture, onMouseDownCapture, onMouseUpCapture, onPointerDownCapture, onPointerUpCapture, onTouchEndCapture, onTouchStartCapture, shouldFitContainer, spacing, testId, ...unsafeRest }: LinkButtonProps<RouterLinkConfig>, ref: React.Ref<HTMLAnchorElement>) => JSX.Element;
/**
 * __Link Button__
 *
 * Renders a link in the style of a button.
 *
 * - [Examples](https://atlassian.design/components/link-button/examples)
 * - [Code](https://atlassian.design/components/link-button/code)
 * - [Usage](https://atlassian.design/components/link-button/usage)
 */
declare const LinkButton: (<RouterLinkConfig extends Record<string, any> = never>(props: LinkButtonProps<RouterLinkConfig> & {
    ref?: React.Ref<HTMLAnchorElement>;
}) => ReturnType<typeof LinkButtonBase>) & {
    displayName?: string;
};
export default LinkButton;
