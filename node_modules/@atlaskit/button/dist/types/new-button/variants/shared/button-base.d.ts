/**
 * @jsxRuntime classic
 * @jsx jsx
 */
import React from 'react';
import { type UIAnalyticsEvent } from '@atlaskit/analytics-next';
import { type Appearance, type CommonBaseProps, type CommonButtonProps, type Spacing } from '../types';
export type ControlledEvents<TagName extends HTMLElement> = Pick<React.DOMAttributes<TagName>, 'onMouseDownCapture' | 'onMouseUpCapture' | 'onKeyDownCapture' | 'onKeyUpCapture' | 'onTouchStartCapture' | 'onTouchEndCapture' | 'onPointerDownCapture' | 'onPointerUpCapture' | 'onClickCapture' | 'onMouseOver' | 'onMouseOut' | 'onMouseMove' | 'onFocus' | 'onBlur' | 'onMouseDown' | 'onMouseUp' | 'onKeyDown' | 'onKeyUp' | 'onTouchStart' | 'onTouchEnd' | 'onPointerDown' | 'onPointerUp'> & Pick<CommonButtonProps<TagName>, 'onClick'>;
type ButtonBaseProps<TagName extends HTMLElement> = CommonBaseProps & Pick<CommonButtonProps<TagName>, 'autoFocus' | 'isDisabled' | 'isSelected' | 'testId' | 'analyticsContext' | 'interactionName'> & {
    appearance?: Appearance;
    isLoading?: boolean;
    isIconButton?: boolean;
    isCircle?: boolean;
    hasIconBefore?: boolean;
    hasIconAfter?: boolean;
    shouldFitContainer?: boolean;
    spacing?: Spacing;
    ariaLabel?: string;
    ariaLabelledBy?: string;
    children: React.ReactNode;
    ref: React.Ref<TagName>;
    type?: React.ButtonHTMLAttributes<HTMLButtonElement>['type'];
    componentName?: string;
    role?: string;
    iconButtonRef?: React.Ref<HTMLButtonElement>;
    tooltipRef?: React.Ref<HTMLButtonElement>;
    onMouseOver?: React.MouseEventHandler<HTMLButtonElement> | React.MouseEventHandler<TagName>;
    onMouseOutonMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
    onMouseMoveonMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
    onMouseDownonMouseOver?: React.MouseEventHandler<HTMLButtonElement>;
    onMouseMove?: React.MouseEventHandler<HTMLButtonElement>;
    onFocus?: React.FocusEventHandler<HTMLButtonElement>;
    onBlur?: React.FocusEventHandler<HTMLButtonElement>;
    onClick?: ((e: React.MouseEvent<TagName>, analyticsEvent: UIAnalyticsEvent) => void) | undefined;
} & ControlledEvents<TagName>;
/**
 * __button base__
 *
 * - Implements auto focus when enabled.
 * - Appends the `onClick` event with UFO analytics tracking.
 *
 * @private
 */
declare const ButtonBase: React.ForwardRefExoticComponent<Omit<ButtonBaseProps<HTMLButtonElement>, "ref"> & React.RefAttributes<HTMLButtonElement>>;
export default ButtonBase;
